//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming



export interface ActionIndex {
    actionId: string;
    index: number;
    actionData: FlowDefinitionAction;
}

export interface ActionRoute {
    taskActionId?: string | null;
    targetStepId?: string | null;
    targetStatus?: TaskInstanceStatus;
}

export interface ActionSummary {
    id?: string;
    name?: string;
    targetStatus?: TaskInstanceStatus;
}

export enum AdapterComponentPresentationTypeEnum {
    Debug = 1,
    Generic = 2,
    List = 3,
}

export enum AdapterTrigger {
    Manual = 0,
    Automatic = 1,
}

export interface AddActionCommentRequest {
    flowVersionId: string;
    comment?: FlowComment;
    stepId: string;
    actionId: string;
}

export interface AddBasicTicketEventRequest {
    chatWidgetId: string;
    to: string;
    ticketId?: string;
    eventData?: BasicTicketEvent;
}

export interface AddChannelResponse {
}

export interface AddExecutionEnvironmentRequest {
    workspaceId: string;
    name: string;
}

export interface AddExternalMessageRequest {
    ticketId: string;
    messageId?: string | null;
    subject?: string;
    bodyAsMarkdown?: string;
    bodyAsHtml?: string | null;
    cannedResponseId?: string | null;
    attachmentFileDatas?: AttachmentFileData[] | null;
    receivers: AddExternalMessageRequestReceiver[];
}

export interface AddExternalMessageRequestReceiver {
    name?: string | null;
    address?: string | null;
    communicatorId?: string | null;
    communicatorAddressId?: string | null;
}

export interface AddExternalMessageResponse {
    taskMessage: string;
}

export interface AddFlowCommentRequest {
    flowVersionId: string;
    comment?: FlowComment;
}

export interface AddInternetDomainRequest {
    domainName?: string;
}

export interface AddKnowledgeBaseArticleRequest {
    knowledgeBaseId: string;
}

export interface AddKnowledgeBaseRequest {
    workspaceId: string;
}

export interface AddLabelRequest {
    workspaceId: string;
    name: string;
    color: ColorsEnum;
}

export interface AddMessageRequest {
    ticketId: string;
    messageId?: string | null;
    subject?: string;
    bodyAsMarkdown?: string;
    cannedResponseId?: string | null;
    attachmentFileDatas?: AttachmentFileData[] | null;
    receivers: AddMessageRequestReceiver[];
    bodyAsHtml?: string | null;
}

export interface AddMessageRequestReceiver {
    communicationChannelId?: string;
    communicationType?: CommunicationType;
    name?: string | null;
    address?: string | null;
    communicatorId?: string | null;
    communicatorAddressId?: string | null;
}

export interface AddMessageResponse {
    taskMessage: string;
}

export interface AddNoteRequest {
    id?: string;
    ticketId?: string;
    bodyAsMarkdown?: string;
    attachmentFileDatas?: AttachmentFileData[] | null;
}

export interface AddSlaDefinitionRequest {
    workspaceId: string;
    type: SlaType;
}

export interface AddStepCommentRequest {
    flowVersionId: string;
    comment?: FlowComment;
    stepId: string;
}

export interface AddTaskDefinitionRequest {
    workspaceId: string;
}

export interface AddTaskSettingsData {
    taskDefinitionId?: string | null;
    useAsync?: boolean;
    note?: string;
    actionRoutes?: ActionRoute[] | null;
    startSettings?: TaskStartSettings;
    overdueSettings?: TaskOverdueSettings;
    assignedUserIds?: string[] | null;
    assignedTeamIds?: string[] | null;
}

export interface AddTeamRequest {
    workspaceId: string;
    name: string;
    handle: string;
}

export interface AddTicketRequest {
    subject?: string;
    workspaceId?: string;
    communicatorName?: string | null;
    communicatorAddress?: string | null;
    communicatorId?: string | null;
    communicatorAddressId?: string | null;
    communicationChannelId?: string | null;
    labelDefinitionIds?: string[] | null;
    assignmentUserIds?: string[] | null;
    assignmentTeamIds?: string[] | null;
    noteAsMarkdown?: string;
    ignoreAutoStartingFlows?: boolean;
    forceNew?: boolean;
}

export interface AddTicketResponse {
    ticketId?: string;
}

export interface AddUserRequest {
    workspaceId: string;
    name: string;
    handle: string;
    userName: string;
    emailAddress: string;
    userType: UserTypeEnum;
    gender?: GenderEnum;
}

export interface AffiliatePartnershipSettings {
    financeViaPartner?: boolean;
    invoiceMailAddresses?: string[] | null;
}

export interface ApiAdapterExecutionLog {
    id: string;
    workspaceId: string;
    creationDate: Date;
    apiAdapterDefinitionId: string;
    apiAdapterInstanceId: string;
    message?: string | null;
    requestDataJson?: string | null;
    responseDataJson?: string | null;
    executionMs: number;
    success: boolean;
    responseCode?: number | null;
}

export interface ApiAdapterExecutionSettings {
    apiUrl?: string;
    method?: ApiMethod;
    retryOnFailure?: boolean;
    bodyTemplate?: string | null;
    useAuthHeader?: boolean;
    authHeader?: TemplateHeaderItem;
    headers?: TemplateHeaderItem[];
    customAttributes?: TemplateCustomAttribute[];
    databagDependencies?: DataBagPointer[];
}

export interface ApiAdapterSettingsData {
    apiAdapterDefinitionId?: string | null;
    failTargetStepId?: string | null;
}

export interface ApiHeaderItem {
    key?: string;
    value?: string;
}

export enum ApiMethod {
    Get = 0,
    Post = 1,
}

export interface AppearanceCondition {
    id?: string;
    operator?: AppearanceConditionOperatorEnum;
    color?: ColorsEnum;
    validationValue?: number | null;
}

export enum AppearanceConditionOperatorEnum {
    LessThen = 0,
    Equals = 1,
    GreaterThan = 2,
}

export enum AssigneeTypeEnum {
    None = 0,
    User = 1,
    Team = 2,
}

export enum AssignmentActionType {
    Start = 1,
    End = 2,
}

export enum AssignmentFilterEnum {
    All = 0,
    Me = 1,
    Unassigned = 2,
    Custom = 3,
}

export enum AssignmentObjectTypeEnum {
    Ticket = 1,
    Task = 2,
}

export interface AttachmentFileData {
    fileDataId?: string | null;
    workspaceId?: string | null;
    fileName?: string;
    disablePreview?: boolean | null;
    warningMessage?: string | null;
}

export interface AuthenticateResponse {
    authentication?: UserServiceAuthenticationResponse;
    userContext?: MyUserContext;
}

export enum AuthorizationObjectType {
    Workspace = 0,
    Ticket = 1,
    TaskInstance = 2,
    ProcessConfiguration = 3,
    TechnicalConfiguration = 4,
    ConfigurationSecrets = 5,
    DashboardObject = 100,
}

export enum AuthorizationSubjectType {
    User = 1,
    Team = 2,
}

export enum AuthorizationType {
    Viewer = 1,
    Contributor = 2,
    Owner = 3,
}

export interface AvailablePhoneNumberData {
    name?: string;
    phoneNumber?: string;
    monthlyCost?: number;
    explanation?: string;
}

export interface BarChartData {
    chartingSize?: ChartingSizeEnum;
    readonly min?: number | null;
    readonly max?: number | null;
    dataType?: TickStatDataTypeEnum;
    chartData?: ChartValueDataItem[];
    lineOptions?: LineOptionsData[];
    title?: string;
    color?: ColorsEnum;
    updateToUtc?: Date | null;
    chartingType?: ChartingTypeEnum;
}

export interface BasicTicketEvent {
    dateUtc?: Date;
    text?: string;
    imageUrl?: string | null;
    color?: ColorsEnum;
    buttons?: TicketEventButton[] | null;
}

export enum BillingCalculationPeriod {
    Day = 0,
    Month = 1,
}

export enum BillingPeriod {
    Month = 1,
}

export interface BillingPeriodData {
    totalAmountWithoutDiscount?: number;
    totalAmountWithDiscount?: number;
    totalDiscount?: number;
    totalAmountInclVat?: number;
    avgPerDay?: number;
    avgPerDayInclVat?: number;
    daysUntilEndBillingPeriod?: number;
    daysInBillingPeriod?: number;
    subscriptionUsages?: SubscriptionUsage[];
    creditCharts?: IChartData[];
    charts?: IChartData[];
    chartsInclVat?: IChartData[];
    credits?: TickSubscriptionCredit[];
}

export enum BotActionTypeEnum {
    Message = 1,
    TextualQuestion = 2,
    Choice = 3,
    InternalNote = 4,
    SearchKnowledgeBase = 5,
}

export interface BotAttemptSettings {
    message?: string | null;
    awaitSeconds?: number;
}

export interface BotChoiceSettings {
    useCustomSender?: boolean;
    customSendByUserId?: string | null;
    message: string;
    saveAnswer: boolean;
    answerStoragePath?: string | null;
    useAnswerEcho?: boolean;
    validEcho?: string | null;
    invalidEcho: string;
    optionsSource: OptionsSourceEnum;
    optionsStorageLocationPath?: string | null;
    options?: FlowOptionsItemData[] | null;
    answerValueStoragePath?: string | null;
    optionsMappingJMESPath?: string | null;
    awaitResponseSettings?: BotWaitingForResponseSettings;
}

export interface BotMessageActionData {
    useCustomSender?: boolean;
    customSendByUserId?: string | null;
    message: string;
    attachmentWorkspaceFiles: string[];
}

export interface BotNoteActionData {
    useCustomSender?: boolean;
    customSendByUserId?: string | null;
    message: string;
    attachmentWorkspaceFiles: string[];
}

export interface BotSearchKnowledgeBaseActionData {
    useCustomSender?: boolean;
    customSendByUserId?: string | null;
    message: string;
    useAnswerEcho?: boolean;
    validEcho?: string | null;
    awaitResponseSettings?: BotWaitingForResponseSettings;
    knowledgeBaseIds?: string[] | null;
    showAmount?: number | null;
    bypassTargetStepId?: string | null;
    noResultsMessage?: string | null;
    readArticleButtonText?: string | null;
}

export interface BotTextualQuestionActionData {
    useCustomSender?: boolean;
    customSendByUserId?: string | null;
    message: string;
    useAnswerEcho?: boolean;
    validEcho?: string | null;
    awaitResponseSettings?: BotWaitingForResponseSettings;
    saveAnswer: boolean;
    answerStoragePath: string;
    invalidEcho: string;
    navigateConditions?: FlowConditionData[] | null;
    validationType?: ValidationTypeEnum;
    answerExtractionRegEx?: string | null;
    validationRegEx?: string | null;
    defaultStepId?: string | null;
    normalizationRules?: NormalizationRule[] | null;
}

export interface BotWaitingForResponseSettings {
    attemptSettings?: BotAttemptSettings[];
    failureTargetStepId?: string | null;
    active?: boolean;
}

export interface CallRequest {
    workspaceId: string;
    externalCallId?: string | null;
    callId?: string | null;
}

export interface CallbackRequest {
    callbackId: string;
}

export enum ChannelRoutingTypeEnum {
    Team = 0,
    User = 1,
}

export interface ChartDataTileSettingsChartSerieSettings {
    statId?: string;
    subjectId?: string | null;
    dataValueType?: ChartDataValueTypeEnum;
    dataType?: TickStatDataTypeEnum;
    id?: string;
    title?: string | null;
    color?: ColorsEnum;
    chartingType?: ChartingTypeEnum;
    getSeriePerSubjectIfAvailable?: boolean;
}

export enum ChartDataValueTypeEnum {
    Average = 0,
    Count = 1,
    Min = 2,
    Max = 3,
}

export interface ChartSerieData {
    id?: string;
    chartData?: IChartData;
}

export interface ChartValueDataItem {
    value?: number | null;
    name?: string;
}

export enum ChartingSizeEnum {
    Mini = 0,
    Small = 1,
    Normal = 2,
}

export enum ChartingTypeEnum {
    Pie = 0,
    Timeline = 1,
    Line = 2,
    Bar = 3,
    Heatmap = 4,
}

export interface ChatWidgetActionItemData {
    id?: string;
    text?: string | null;
    data?: string | null;
    actionType?: ChatWidgetActionItemType;
}

export enum ChatWidgetActionItemType {
    StartFlow = 0,
}

export interface ChatWidgetActionRequest {
    messageId: string;
    sentDate: Date;
    sentDateAsTick: number;
    direction: CommunicationDirection;
    messageHtml?: string | null;
    chatWidgetId: string;
    ticketId: string;
    from: string;
    replyOptions?: ReplyOptionsData[];
    attachmentLinks?: FileLink[];
    senderInfo?: SenderInfoData;
}

export interface ChatWidgetChannelSettings {
    token: string;
    publicSettings?: ChatWidgetPublicSettingsData;
}

export interface ChatWidgetConversationSettingsData {
    inboundMessageStyle?: ChatWidgetStylingSettingsData;
    outboundMessageStyle?: ChatWidgetStylingSettingsData;
    messageBoxStyle?: ChatWidgetStylingSettingsData;
    buttonsStyle?: ChatWidgetStylingSettingsData;
    messageActions?: ChatWidgetStylingSettingsData;
    showAvatars?: boolean;
    positionAllMessagesLeft?: boolean;
}

export interface ChatWidgetLobbySettingsData {
    title?: string | null;
    message?: string | null;
    messageHtml?: string | null;
    actionsStyling?: ChatWidgetStylingSettingsData;
    actions?: ChatWidgetActionItemData[] | null;
}

export interface ChatWidgetOpenerSettingData {
    styling?: ChatWidgetStylingSettingsData;
    backgroundImageFileUrl?: string | null;
    type?: OpenerTypeEnum;
    title?: string | null;
}

export interface ChatWidgetPublicSettingsData {
    maxHeightPercentage?: number;
    maxWidth?: number;
    styling?: ChatWidgetStylingSettingsData;
    lobby?: ChatWidgetLobbySettingsData;
    conversation?: ChatWidgetConversationSettingsData;
    opener?: ChatWidgetOpenerSettingData;
    readonly title?: string | null;
    backgroundImageFileUrl?: string | null;
    allowFileUploads?: boolean;
    openingHours?: OpeningHoursData;
    header?: ChatWidgetStylingSettingsData;
}

export interface ChatWidgetStylingSettingsData {
    showBackground?: boolean;
    backgroundColor?: string | null;
    foregroundColor?: string | null;
    borderRadius_LeftTop?: number;
    borderRadius_RightTop?: number;
    borderRadius_LeftBottom?: number;
    borderRadius_RightBottom?: number;
    borderRadius?: number;
    borderRadius_Linked?: boolean;
    showBorder?: boolean;
    borderColor?: string | null;
    useCustomPadding?: boolean;
    padding_LeftTop?: number;
    padding_RightTop?: number;
    padding_LeftBottom?: number;
    padding_RightBottom?: number;
    fontSize?: number | null;
    fontFamily?: string | null;
    dropShadow?: number | null;
}

export interface ChatWidgetTicketInfoRequest {
    ticketId?: string;
    chatWidgetId?: string;
}

export interface ChatWidgetTypingRequest {
    id?: string;
    autoRemoveAfterReceiveMessage?: boolean;
    ticketId?: string;
    chatWidgetId?: string;
    typingUsers?: TypingUserData[];
    typingCommunicators?: TypingCommunicatorData[];
}

export interface ChoiceOptionData {
    value?: string | null;
    text?: string | null;
}

export enum ClientAutoRefreshRateEnum {
    Never = 0,
    Minute = 1,
    FiveMinute = 2,
    Hourly = 3,
}

export interface Collection {
    id: string;
    name: string;
    children?: Collection[];
    objects?: CollectionObject[];
}

export interface CollectionObject {
    currentVersionId: string;
    id: string;
    name: string;
    objectType: CollectionObjectTypeEnum;
    versions: ObjectVersion[];
}

export enum CollectionObjectTypeEnum {
    Flow = 1,
    DataAdapter = 2,
    MetaDataComponent = 3,
    File = 4,
    Task = 5,
    KnowledgeBase = 6,
}

export interface CollectionsData {
    collections?: Collection[];
    objectsOutsideCollection?: CollectionObject[];
}

export enum ColorsEnum {
    Grey = 0,
    SubtleGreen = 1,
    Green = 2,
    BoldGreen = 3,
    SubtleYellow = 4,
    Yellow = 5,
    BoldYellow = 6,
    SubtleOrange = 7,
    Orange = 8,
    BoldOrange = 9,
    SubtleRed = 10,
    Red = 11,
    BoldRed = 12,
    SubtlePurple = 13,
    Purple = 14,
    BoldPurple = 15,
    SubtleBlue = 16,
    Blue = 17,
    BoldBlue = 18,
    SubtleSky = 19,
    Sky = 20,
    BoldSky = 21,
    SubtlePink = 22,
    Pink = 23,
    BoldPink = 24,
    SubtleBlack = 25,
    Black = 26,
    BoldBlack = 27,
    SubtleLime = 28,
    Lime = 29,
    BoldLime = 30,
}

export enum CommunicationDirection {
    Unknown = 0,
    Inbound = 1,
    Outbound = 2,
}

export enum CommunicationReceiverType {
    PublicMessage = 0,
    ExternalMessage = 1,
}

export enum CommunicationType {
    Unknown = 0,
    Email = 1,
    Telegram = 2,
    ChatWidget = 3,
    FacebookMessenger = 4,
    Phone = 5,
}

export enum CommunicatorActionTypeEnum {
    CommunicatorLogic = 1,
}

export interface CommunicatorAddress {
    id: string;
    type: CommunicationType;
    address: string;
    use: boolean;
    preferredChannelId?: string | null;
    avatarFileId?: string | null;
}

export interface CommunicatorCategoryDefinitionSettings {
    form?: FormDefinitionSettings;
}

export interface CommunicatorCategoryWorkingData {
    categoryDefinitionId?: string;
    form?: FormData;
    categoryWeight?: number;
}

export interface CommunicatorFilterOptions {
    filterCreationFromDate?: Date | null;
    categoryIds?: string[] | null;
}

export interface CommunicatorHistoryDataItem {
    ticketId?: string;
    title?: string | null;
    creationDate?: Date;
    status?: TicketStatus;
}

export interface CommunicatorLogicSettings {
    useEditName?: boolean;
    name?: string | null;
    useEditAvatarAndColor?: boolean;
    color?: ColorsEnum;
    avatarFileId?: string | null;
    useSetSpammer?: boolean;
    markAsSpammer?: boolean;
    useSetCategory?: boolean;
    resetCategoriesFirst?: boolean;
    addCategoryIds?: string[] | null;
    removeCategoryIds?: string[] | null;
}

export enum ComponentDataSourceTypeEnum {
    DataAdapter = 1,
    Tick = 2,
}

export interface Condition {
    id: string;
    referenceInput: string;
    conditionOperator: ConditionOperator;
    conditionType: ConditionType;
    referenceValue: string;
    elementType: ConditionElement;
}

export enum ConditionElement {
    Single = 0,
    Group = 1,
}

export interface ConditionGroup {
    id: string;
    name: string;
    elementType: ConditionElement;
    logicalOperator: ConditionLogicalOperator;
    conditions: ICondition[];
}

export enum ConditionLogicalOperator {
    Any = 0,
    All = 1,
}

export enum ConditionOperator {
    Does = 0,
    DoesNot = 1,
}

export enum ConditionType {
    Contains = 0,
    Match = 1,
    GreaterThen = 2,
    SmallerThen = 3,
}

export interface CopyToEnvironmentRequest {
    flowVersionId: string;
    executionEnvironmentId: string;
}

export interface CreateCallRequest {
    workspaceId: string;
    phoneNumber?: string;
    useChannelId?: string;
    deviceId?: string;
    communicatorId: string;
    communicatorAddressId: string;
}

export interface CreateCollectionRequest {
    workspaceId: string;
    name: string;
    parentId?: string | null;
}

export interface CreateCollectionResponse {
    collectionId: string;
}

export interface CreateCommunicatorCategoryDefinitionRequest {
    workspaceId: string;
    name: string;
}

export interface CreateDashboardsRequest {
    workspaceId: string;
    useTemplateType?: DashboardTemplateType;
}

export interface CreateDataAdapterDefinitionRequest {
    workspaceId: string;
    collectionId?: string | null;
    name?: string | null;
    copyOfId?: string | null;
}

export interface CreateEmptyEventSubscriptionRequest {
    workspaceId: string;
}

export interface CreateFlowDefinitionActionRequest {
    newActionId?: string;
    flowVersionId?: string;
    stepId?: string;
    index?: number | null;
    actionType?: FlowActionType;
    template?: FlowDefinitionAction;
    subActionType?: number | null;
}

export interface CreateFlowDefinitionRequest {
    workspaceId: string;
    collectionId?: string | null;
    name?: string | null;
    trigger?: FlowTriggerEnum;
    startOnCommunicationChannelIds?: string[] | null;
}

export interface CreateFlowDefinitionVersionRequest {
    flowDefinitionId: string;
}

export interface CreateFlowStepRequest {
    flowVersionId: string;
    position?: UIPositionData;
    stepId?: string | null;
    color?: ColorsEnum;
    template?: FlowStep;
}

export interface CreateWorkspaceRequest {
    name: string;
}

export enum CurrencyType {
    Euro = 0,
}

export interface DashboardAuthorization {
    id?: string;
    userId?: string | null;
    authorization?: DashboardAuthorizationTypeEnum;
}

export enum DashboardAuthorizationTypeEnum {
    Owner = 0,
    Viewer = 1,
}

export interface DashboardDataRequest {
    dashboardId?: string;
    workspaceId?: string;
    charts?: DashboardTileChartRequest[];
    counters?: DashboardTileCounterRequest[];
    pies?: DashboardTilePieRequest[];
    heatmaps?: DashboardTileHeatmapRequest[];
    messageboards?: DashboardTileMessageboardRequest[];
}

export interface DashboardDataResponse {
    id: string;
    chartTiles?: DashboardTileChartResponse[];
    counterTiles?: DashboardTileCounterResponse[];
    pieTiles?: DashboardTilePieResponse[];
    heatmapTiles?: DashboardTileHeatmapResponse[];
    messageboardTiles?: DashboardTileMessageboardResponse[];
}

export interface DashboardSettings {
    tiles?: DashboardTileSettings[];
}

export enum DashboardTemplateType {
    Custom = 0,
    AdapterStats = 1,
}

export interface DashboardTileChartRequest {
    tileId?: string;
    showPeriod?: PeriodicTileShowPeriodEnum;
    showPeriodCustomDateRange?: ShowPeriodCustomDateRangeSettings;
    showResolution?: Period;
    chartDataSeries?: ChartDataTileSettingsChartSerieSettings[];
}

export interface DashboardTileChartResponse {
    id: string;
    message?: string;
    responseDate?: Date;
    from?: Date;
    to?: Date;
    resolution?: Period;
    updatedTo?: Date | null;
    series?: ChartSerieData[];
}

export interface DashboardTileCounterRequest {
    tileId?: string;
    counter?: DatawarehouseCounterDataTileSettings;
}

export interface DashboardTileCounterResponse {
    id: string;
    message?: string;
    responseDate?: Date;
    from?: Date;
    to?: Date;
    resolution?: Period;
    updatedTo?: Date | null;
    value?: number | null;
    conditionalColor?: ColorsEnum;
}

export interface DashboardTileHeatmapRequest {
    tileId?: string;
    heatmap?: DatawarehousHeatmapDataTileSettings;
}

export interface DashboardTileHeatmapResponse {
    id: string;
    message?: string;
    responseDate?: Date;
    from?: Date;
    to?: Date;
    resolution?: Period;
    updatedTo?: Date | null;
    chartData?: HeatmapChartData;
}

export interface DashboardTileMessageboardRequest {
    tileId?: string;
    messageboard?: MessageboardTileSettings;
}

export interface DashboardTileMessageboardResponse {
    id: string;
    message?: string;
    responseDate?: Date;
    messageAsHtml?: string;
}

export interface DashboardTilePieRequest {
    tileId?: string;
    pie?: DatawarehousePieDataTileSettings;
}

export interface DashboardTilePieResponse {
    id: string;
    message?: string;
    responseDate?: Date;
    from?: Date;
    to?: Date;
    resolution?: Period;
    updatedTo?: Date | null;
    chartData?: PieChartData;
}

export interface DashboardTileResponse {
    id: string;
    message?: string;
    responseDate?: Date;
}

export interface DashboardTileSettings {
    id?: string;
    width?: number | null;
    height?: number | null;
    x?: number | null;
    y?: number | null;
    type?: DashboardTileType;
    clientAutoRefreshRate?: ClientAutoRefreshRateEnum;
    tileSettingsJson?: string | null;
}

export enum DashboardTileTemplateType {
    ChartingAdaptersSuccess = 0,
    ChartingAdaptersExecutionTime = 1,
    CounterAdapterExecutions = 2,
    CounterTicketCompletionTime = 3,
    ChartingTicketWaitingFor = 4,
    ChartingTicketUnfinishedVsCompletion = 5,
    CounterTicketUnfinished = 6,
    CounterTasksOpen = 7,
    CounterTasksCompleted = 8,
    CounterTasksOverdue = 9,
    CharterTasksOpen = 10,
    PieTicketCompletedBy = 11,
    PieTasksOpen = 12,
    PieAdapterExecutionTime = 13,
    PieTicketLabels = 14,
    MessageBoard = 15,
    ChartingHeatmapUnfinishedTickets = 16,
    ChartingTicketCompleted = 17,
    ChartingTicketMessages = 18,
    Counter_PhoneChannel_Queued_Total = 19,
    Charting_PhoneChannel_Queued_PerChannel = 20,
}

export enum DashboardTileType {
    Charting = 0,
    Counter = 1,
    Pie = 2,
    Messageboard = 3,
    Heatmap = 4,
}

export enum DataAdapterTypeEnum {
    ApiAdapter = 0,
}

export interface DataBagPointer {
    storageLocation?: StorageLocation;
    storagePath?: string | null;
}

export enum DataItemDataType {
    Object = 0,
    Text = 1,
    Number = 2,
    Bool = 3,
    Array = 4,
}

export enum DatabagActionTypeEnum {
    Calculate = 0,
}

export enum DatabagCalculateOperator {
    Minus = 0,
    Add = 1,
    Multiply = 2,
    Divide = 3,
}

export interface DatabagCalculateSettingsData {
    referenceInput1: string;
    referenceInput2: string;
    operator?: DatabagCalculateOperator;
    useLimitOutput?: boolean;
    minimalOutputReferenceInputPath: string;
    maximallOutputReferenceInputPath: string;
    storeStoragePath?: string | null;
}

export interface DatabagItemDefinitionSummary {
    id: string;
    name: string;
    token?: string;
    storageLocation?: StorageLocation;
}

export interface DatabagStorageSettings {
    resultActionType: ResultActionType;
    name: string;
    extractionStrategy: ExtractionStrategyEnum;
    extractionStrategySettings: string;
    storagePath: string;
}

export interface DatawarehousHeatmapDataTileSettings {
    statId?: string;
    subjectId?: string | null;
    dataValueType?: ChartDataValueTypeEnum;
    dataType?: TickStatDataTypeEnum;
    title?: string | null;
    type?: TickStatDataTypeEnum;
    color?: ColorsEnum;
    showResolution?: Period;
    showPeriod?: PeriodicTileShowPeriodEnum;
    showPeriodCustomDateRange?: ShowPeriodCustomDateRangeSettings;
    appearanceConditions?: RangeAppearanceCondition[] | null;
}

export interface DatawarehouseChartDataTileSettings {
    title?: string | null;
    showPeriod?: PeriodicTileShowPeriodEnum;
    customDateRangeSettings?: ShowPeriodCustomDateRangeSettings;
    showResolution?: Period;
    stackSeries?: boolean;
    chartDataSeries?: ChartDataTileSettingsChartSerieSettings[] | null;
}

export interface DatawarehouseCounterDataTileSettings {
    statId?: string;
    subjectId?: string | null;
    dataValueType?: ChartDataValueTypeEnum;
    dataType?: TickStatDataTypeEnum;
    title?: string | null;
    type?: TickStatDataTypeEnum;
    showResolution?: Period;
    showPeriod?: PeriodicTileShowPeriodEnum;
    showPeriodCustomDateRange?: ShowPeriodCustomDateRangeSettings;
    appearanceConditions?: AppearanceCondition[] | null;
}

export interface DatawarehousePieDataTileSettings {
    statId?: string;
    subjectId?: string | null;
    dataValueType?: ChartDataValueTypeEnum;
    dataType?: TickStatDataTypeEnum;
    title?: string | null;
    type?: TickStatDataTypeEnum;
    showResolution?: Period;
    showPeriod?: PeriodicTileShowPeriodEnum;
    showPeriodCustomDateRange?: ShowPeriodCustomDateRangeSettings;
}

export interface DeleteActionRequest {
    flowVersionId: string;
    stepId: string;
    actionId: string;
}

export interface DeleteCollectionRequest {
    collectionId: string;
    confirmed: boolean;
}

export interface DeleteConfirmationInfo {
    numberOfCollections: number;
    isDeleting: boolean;
    numberOfObjects: number;
}

export interface DeleteDashboardRequest {
    workspaceId: string;
    id?: string;
}

export interface DeleteFlowDefinitionRequest {
    flowVersionId: string;
    flowDefinitionId: string;
}

export interface DeleteFlowStepRequest {
    flowVersionId: string;
    stepId: string;
}

export enum DevelopmentFeature {
    Test = 0,
}

export enum DocumentationGroup {
    General = 0,
    Collections = 1,
    FLowEditorFlowInProduction = 2,
    FlowEditorFlow = 3,
    AdapterEditor = 4,
    Utility = 5,
    ChannelEditorTelegram = 6,
    ChannelEditorChatWidget = 7,
    States = 8,
    FLowEditorFlowInDevelopment = 9,
    FlowEditorFlowActionTask = 10,
    FlowEditorStep = 11,
    TicketLifecycle = 12,
    DomainVerification = 13,
    EventSubscriptionEditor = 14,
    AuthorizationsEditor = 15,
}

export interface ECommerceIntegrationMetaDataComponentData {
    firstName?: string | null;
    recentOrders?: ECommerceIntegrationOrder[] | null;
}

export interface ECommerceIntegrationOrder {
    id?: string;
    orderNumber?: string;
    lineItems?: ECommerceIntegrationOrderLineItem[];
    fulfillments?: ECommerceIntegrationOrderFulfillment[];
}

export interface ECommerceIntegrationOrderFulfillment {
    trackingUrls?: string[];
    creationDate?: Date | null;
}

export interface ECommerceIntegrationOrderLineItem {
    id?: string;
    name?: string;
    price?: number | null;
    priceText?: string;
    title?: string;
    fulfillmentStatus?: string;
    trackAndTraceUrl?: string | null;
}

export interface EditTicketRequest {
    ticketId: string;
    title?: string | null;
}

export interface EmailChannelSettings {
    apiKey: string;
    emailAddress: string;
    emailTemplate?: string;
}

export interface EndVoiceRequest {
    deviceId?: string;
}

export enum EventDataType {
    TicketSummary = 1,
    TicketSummaries = 2,
    TicketMetaDataComponentUpdate = 4,
    AdapterResponseData = 5,
    TicketMetaDataComponentsDeletion = 6,
    TicketUpdate = 7,
    TenantUpdate = 8,
    NotificationsBundle = 9,
    TaskSummary = 10,
    User = 11,
}

export enum EventObjectType {
    All = 1,
    Ticket = 2,
    DataAdapter = 3,
    Tenant = 4,
    Notification = 5,
    Task = 6,
    User = 7,
}

export enum EventType {
    All = 1,
    New = 2,
    Update = 3,
}

export interface ExchangeCreatorRequest {
    name?: string;
    description?: string;
    references?: ExchangeManifestPointer[];
}

export interface ExchangeInstallationProgress {
    success?: boolean;
    messages?: string[];
}

export interface ExchangeItem {
    id?: string;
    creationDate?: Date;
    name?: string;
    description?: string;
    manifestJson?: string | null;
    createdByTenantId?: string;
    cover?: string;
    icon?: string;
    manifest?: ExchangeSetupManifest;
}

export interface ExchangeManifestInstallForm {
    sections?: ExchangeManifestInstallFormSection[];
}

export interface ExchangeManifestInstallFormInput {
    index?: number;
    name?: string | null;
    description?: string | null;
    pointers?: ExchangeManifestPointer[] | null;
    value?: string | null;
    type?: ExchangeManifestInstallFormInputType;
    required?: boolean;
}

export enum ExchangeManifestInstallFormInputType {
    UsersAndTeamsSelector = 0,
    Channels = 1,
    Text = 2,
}

export interface ExchangeManifestInstallFormSection {
    index?: number;
    name?: string | null;
    description?: string | null;
    inputs?: ExchangeManifestInstallFormInput[] | null;
}

export enum ExchangeManifestInstallPointerType {
    CollectionItem = 0,
    DatabagItem = 1,
    Label = 2,
    UsersAndTeamsSelection = 3,
}

export interface ExchangeManifestPointer {
    id?: string;
    pointerPath?: string;
    pointerSubPath?: string;
    pointerType?: ExchangeManifestInstallPointerType;
    name?: string | null;
    collectionObjectType?: CollectionObjectTypeEnum;
    objectId?: string | null;
    objectVersionId?: string | null;
    objectJson?: string | null;
}

export interface ExchangeSetupManifest {
    name?: string;
    description?: string;
    references?: ExchangeManifestPointer[];
    installationForm?: ExchangeManifestInstallForm;
}

export interface ExecutionEnvironmentMetaDataItem {
    id: string;
    name: string;
    isProduction: boolean;
}

export enum ExtractionStrategyEnum {
    Unredacted = 1,
    JMESPath = 2,
}

export interface FacebookMessengerChannelSettings {
    pageToken: string;
    pageId: string;
}

export interface FileLink {
    fileDataId?: string | null;
    name: string;
    url?: string | null;
    disablePreview?: boolean | null;
    warning?: string | null;
}

export enum FileSourceType {
    WorkspaceFile = 0,
    Attachment = 1,
    CommunicatorAvatar = 2,
    InternalAvatar = 3,
    ChannelFile = 4,
    PhoneChannelRecording = 5,
    WorkspaceIcon = 6,
}

export interface FinishTicketFlowsRequest {
    ticketId: string;
}

export interface FinishTicketRequest {
    ticketId: string;
}

export interface FlowActionBotSettings {
    delayMsAfterExecute?: number | null;
    actionType: BotActionTypeEnum;
    actionDataJson: string;
}

export interface FlowActionCommunicatorSettings {
    delayMsAfterExecute?: number | null;
    actionType: CommunicatorActionTypeEnum;
    actionDataJson: string;
}

export interface FlowActionDataAdapterSettings {
    delayMsAfterExecute?: number | null;
    actionDataJson: string;
    actionType: DataAdapterTypeEnum;
}

export interface FlowActionDatabagSettings {
    delayMsAfterExecute?: number | null;
    actionDataJson: string;
    actionType: DatabagActionTypeEnum;
}

export interface FlowActionFlowActionsSettings {
    delayMsAfterExecute?: number | null;
    actionDataJson: string;
    actionType: FlowActionTypeEnum;
}

export interface FlowActionLogicSettings {
    delayMsAfterExecute?: number | null;
    actionType: TicketLogicActionTypeEnum;
    actionDataJson: string;
}

export interface FlowActionNavigateSettings {
    delayMsAfterExecute?: number | null;
    actionType: NavigateActionTypeEnum;
    actionDataJson: string;
    nextGroupLogicAsConditionalData?: NextStepLogicConditionalNavigateData;
}

export interface FlowActionSpecialSettings {
    delayMsAfterExecute?: number | null;
    actionType: SpecialActionTypeEnum;
    actionDataJson: string;
}

export interface FlowActionTaskSettings {
    delayMsAfterExecute?: number | null;
    actionDataJson: string;
    actionType: TaskTypeEnum;
}

export enum FlowActionType {
    BOT = 0,
    TicketLogic = 1,
    Navigate = 2,
    DataAdapter = 3,
    FlowLogic = 4,
    Task = 5,
    DatabagLogic = 6,
    Special = 7,
    Communicator = 8,
}

export enum FlowActionTypeEnum {
    FlowNavigation = 0,
}

export interface FlowComment {
    id?: string;
    initiator?: Initiator;
    text?: string;
}

export interface FlowConditionData {
    id: string;
    name: string;
    index: number;
    condition: ConditionGroup;
    targetStepId?: string | null;
}

export interface FlowDefinitionAction {
    id: string;
    index: number;
    name: string;
    note?: string;
    comments: FlowComment[];
    actionType: FlowActionType;
    actionSettingsJson: string;
}

export enum FlowLogType {
    Debug = 0,
    Warning = 1,
}

export interface FlowOptionsItemData {
    id: string;
    text: string;
    data: string;
    targetStepId?: string | null;
}

export interface FlowStep {
    id: string;
    name: string;
    actions?: FlowDefinitionAction[] | null;
    uiPosition?: UIPositionData;
    targetStepId?: string | null;
    comments?: FlowComment[];
    color?: ColorsEnum;
}

export enum FlowTriggerEnum {
    Auto = 1,
    Manual = 2,
}

export interface FormData {
    id?: string;
    tiles?: WorkingFormTileSettings[] | null;
}

export interface FormDatabagItemPointer {
    storageLocation?: StorageLocation;
    path?: string | null;
}

export interface FormDefinitionSettings {
    tiles?: FormTileSettings[] | null;
}

export interface FormField {
    id?: string;
    name?: string;
    description?: string;
    type?: FormFieldType;
    inputType?: FormFieldInputType;
    value?: string | null;
    valueEdited?: boolean;
    required?: boolean;
    options?: OptionsItemData[] | null;
    textArea_Minimumrows?: number;
}

export interface FormFieldDefinition {
    id?: string;
    type?: FormFieldType;
    readonly getFormFieldDefaultStoragePath?: string;
    settingsJson?: string | null;
}

export interface FormFieldExplanationSettings {
    name?: string;
    description?: string | null;
}

export interface FormFieldInputSettings {
    name?: string;
    description?: string | null;
    type?: FormFieldInputType;
    required?: boolean;
    textArea_Minimumrows?: number;
    validationType?: ValidationTypeEnum;
    validationRegEx?: string | null;
    storeToState?: boolean;
    answerStoragePath?: string | null;
    invalidEcho?: string | null;
}

export enum FormFieldInputType {
    SingleLine = 0,
    MultiLine = 1,
    Numeric = 2,
    Date = 3,
    Checkbox = 4,
    Select = 5,
}

export interface FormFieldSelectInputSettings {
    name?: string;
    description?: string | null;
    type?: FormFieldInputType;
    required?: boolean;
    textArea_Minimumrows?: number;
    validationType?: ValidationTypeEnum;
    validationRegEx?: string | null;
    storeToState?: boolean;
    answerStoragePath?: string | null;
    invalidEcho?: string | null;
    optionsSource: OptionsSourceEnum;
    optionsStorageLocationPath?: string | null;
    options?: OptionsItemData[] | null;
    answerValueStoragePath?: string | null;
    optionsMappingJMESPath?: string | null;
}

export interface FormFieldSmartViewerSettings {
    name?: string;
    description?: string | null;
    dataStoragePath: string;
}

export enum FormFieldType {
    Explanation = 1,
    Input = 2,
    SelectInput = 3,
    SmartViewer = 4,
}

export interface FormFieldValidationMessage {
    formFieldId?: string;
    message?: string;
}

export interface FormTileSettings {
    id?: string;
    width?: number | null;
    height?: number | null;
    x?: number | null;
    y?: number | null;
    fields?: FormFieldDefinition[] | null;
}

export interface FormValidationResponse {
    objectId?: string;
    formId?: string;
    isValid?: boolean;
    isFinalizingTask?: boolean;
    fieldValidationErrors?: FormFieldValidationMessage[];
    summary?: TickTaskInstanceSummary;
}

export enum GenderEnum {
    Male = 0,
    Female = 1,
}

export interface GeneralChannelSettings {
    useForRouting: boolean;
    routingUserIds: string[];
    routingTeamIds: string[];
}

export interface GenericDataClass {
    id: string;
    yourImageUrl?: string;
    documentation?: string[];
    context?: string;
    today: Date;
    accountManager: string;
    demoOrdersFromYourCrm: GenericOrder[];
    paid?: IChartData;
    barChart?: BarChartData;
}

export interface GenericOrder {
    id: string;
    title: string;
    nrOfProducts: number;
    amountEuro: string;
    isPaid: boolean;
    customButton?: string | null;
}

export interface GetAsCollectionRequest {
    workspaceId: string;
}

export interface GetCommunicatorsRequest {
    skip?: number | null;
    take?: number | null;
    filters?: CommunicatorFilterOptions;
}

export interface GetCommunicatorsResponse {
    totalCount: number;
    skip?: number;
    take?: number;
    communicators?: TickCommunicatorSummary[] | null;
    usedFilters?: CommunicatorFilterOptions;
}

export interface GetDashboardsRequest {
    workspaceId: string;
}

export interface GetEmptyChannelRequest {
    communicationType: CommunicationType;
    workspaceId: string;
    name: string;
    settingsJson?: string | null;
}

export interface GetRegisterProgressRequest {
    registerTaskId: string;
    validationCode?: string;
}

export interface GetRegisterProgressResponse {
    taskFinished: boolean;
    message: string;
    redirectUrl?: string | null;
}

export interface GetStatisticDefinitionsRequest {
    workspaceId: string;
}

export interface GetStatisticDefinitionsResponse {
    statistics?: TickStatDefinition[];
}

export interface GetTasksRequest {
    skip?: number | null;
    take?: number | null;
    filters?: TaskFilterOptions;
}

export interface GetTasksResponse {
    totalCount: number;
    skip?: number;
    take?: number;
    tasks?: TickTaskInstanceSummary[] | null;
    usedFilters?: TaskFilterOptions;
}

export interface GetTenantInfoByUrlNameRequest {
    tenantUrlName: string;
}

export interface GetTenantInfoByUrlNameResponse {
    success: boolean;
    tenantId: string;
    tenantName: string;
    tenantUrlName: string;
}

export interface GetTicketsRequest {
    skip?: number | null;
    take?: number | null;
    filters?: TicketFilterOptions;
}

export interface GetTicketsResponse {
    totalCount: number;
    skip?: number;
    take?: number;
    tickets?: TicketSummary[] | null;
    usedFilters?: TicketFilterOptions;
}

export interface HeatmapChartData {
    dataType?: TickStatDataTypeEnum;
    chartingType?: ChartingTypeEnum;
    chartingSize?: ChartingSizeEnum;
    readonly min?: number | null;
    readonly max?: number | null;
    serieData?: HeatmapChartSerieItem[];
    updateToUtc?: Date | null;
}

export interface HeatmapChartSerieItem {
    name?: string;
    chartData?: HeatmapChartValueDataItem[];
}

export interface HeatmapChartValueDataItem {
    value?: number | null;
    name?: string;
}

export interface HttpContent {
    readonly headers?: StringStringIEnumerableKeyValuePair[];
}

export interface HttpMethod {
    method?: string;
}

export interface HttpRequestMessage {
    version?: Version;
    versionPolicy?: HttpVersionPolicy;
    content?: HttpContent;
    method?: HttpMethod;
    requestUri?: string | null;
    readonly headers?: StringStringIEnumerableKeyValuePair[];
    readonly properties?: { [key: string]: any; };
    readonly options?: { [key: string]: any; };
}

export interface HttpResponseMessage {
    version?: Version;
    content?: HttpContent;
    statusCode?: HttpStatusCode;
    reasonPhrase?: string | null;
    readonly headers?: StringStringIEnumerableKeyValuePair[];
    readonly trailingHeaders?: StringStringIEnumerableKeyValuePair[];
    requestMessage?: HttpRequestMessage;
    readonly isSuccessStatusCode?: boolean;
}

export enum HttpStatusCode {
    Continue = 100,
    SwitchingProtocols = 101,
    Processing = 102,
    EarlyHints = 103,
    OK = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultiStatus = 207,
    AlreadyReported = 208,
    IMUsed = 226,
    MultipleChoices = 300,
    Ambiguous = 301,
    MovedPermanently = 302,
    Moved = 303,
    Found = 304,
    Redirect = 305,
    SeeOther = 306,
    RedirectMethod = 307,
    NotModified = 308,
    UseProxy = 400,
    Unused = 401,
    TemporaryRedirect = 402,
    RedirectKeepVerb = 403,
    PermanentRedirect = 404,
    BadRequest = 405,
    Unauthorized = 406,
    PaymentRequired = 407,
    Forbidden = 408,
    NotFound = 409,
    MethodNotAllowed = 410,
    NotAcceptable = 411,
    ProxyAuthenticationRequired = 412,
    RequestTimeout = 413,
    Conflict = 414,
    Gone = 415,
    LengthRequired = 416,
    PreconditionFailed = 417,
    RequestEntityTooLarge = 421,
    RequestUriTooLong = 422,
    UnsupportedMediaType = 423,
    RequestedRangeNotSatisfiable = 424,
    ExpectationFailed = 426,
    MisdirectedRequest = 428,
    UnprocessableEntity = 429,
    UnprocessableContent = 431,
    Locked = 451,
    FailedDependency = 500,
    UpgradeRequired = 501,
    PreconditionRequired = 502,
    TooManyRequests = 503,
    RequestHeaderFieldsTooLarge = 504,
    UnavailableForLegalReasons = 505,
    InternalServerError = 506,
    NotImplemented = 507,
    BadGateway = 508,
    ServiceUnavailable = 510,
    GatewayTimeout = 511,
}

export enum HttpVersionPolicy {
    RequestVersionOrLower = 0,
    RequestVersionOrHigher = 1,
    RequestVersionExact = 2,
}

export interface IChartData {
    chartingType?: ChartingTypeEnum;
    chartingSize?: ChartingSizeEnum;
    dataType?: TickStatDataTypeEnum;
    readonly updateToUtc?: Date | null;
    readonly min?: number | null;
    readonly max?: number | null;
}

export interface ICondition {
    id: string;
    elementType: ConditionElement;
}

export interface Initiator {
    type?: InitiatorTypeEnum;
    id?: string;
}

export enum InitiatorTypeEnum {
    User = 0,
    Flow = 1,
    System = 2,
}

export enum IntegrationType {
    Slack = 1,
    Shopify = 2,
}

export interface IsTypingData {
    userIds?: string[];
    communicatorIds?: string[];
}

export enum KnowledgeBaseTypeEnum {
    Public = 0,
    Internal = 1,
}

export enum LabelActionType {
    Add = 1,
    Remove = 2,
}

export interface LanguageItem {
    path?: LanguagePath;
    value?: string;
    usage?: UsageArea;
    lang?: LanguageType;
}

export interface LanguagePack {
    language?: LanguageType;
    items?: LanguageItem[];
}

export enum LanguagePath {
    App_Question_Sure = 0,
    App_Question_New_Name = 1,
    App_Message = 2,
    App_Notifications = 3,
    Yes = 4,
    No = 5,
    Admin = 6,
    Bots = 7,
    Bot = 8,
    Seconds = 9,
    Second = 10,
    Minute = 11,
    Minutes = 12,
    Five_minutes = 13,
    Hour = 14,
    Hours = 15,
    Day = 16,
    Days = 17,
    Week = 18,
    Month = 19,
    Months = 20,
    Year = 21,
    Years = 22,
    Currency_Euro = 23,
    Tenant = 24,
    Cancel = 25,
    Seats = 26,
    Billing_Period_Monthly = 27,
    Tickets = 28,
    Ticket = 29,
    Ticket_Status = 30,
    Tickets_Filter_Status_All = 31,
    Tickets_Filter_Status_Completed = 32,
    Tickets_Filter_Status_Open = 33,
    Tickets_Filter_Status_WaitingForCommunicator = 34,
    Tickets_Filter_Status_WaitingForTickUser = 35,
    Custom = 36,
    Assignments = 37,
    Filter_Assignment_All = 38,
    Filter_Assignment_Me = 39,
    Filter_Assignment_Unassigned = 40,
    Filter_Assignment_Custom = 41,
    Communication_Type_Telegram = 42,
    Channels = 43,
    Communication_Type_Mail = 44,
    Communication_Type_ChatWidget = 45,
    Communication_Direction_Inbound = 46,
    Communication_Direction_Outbound = 47,
    Channel = 48,
    Labels = 49,
    Label = 50,
    Flows = 51,
    FlowActions = 52,
    Flow_Trigger_Type_Manual = 53,
    Flow_Trigger_Type_Auto = 54,
    Files = 55,
    Handle = 56,
    Color = 57,
    Communicator = 58,
    Sla_Timers = 59,
    Typing_Indicator = 60,
    Task_Status = 61,
    TaskDefinitions = 62,
    TaskDefinition = 63,
    TaskInstances = 64,
    TaskInstance = 65,
    TaskDefinition_Form_Objects_Checkbox = 66,
    TaskDefinition_Form_Objects_DatePicker = 67,
    TaskDefinition_Form_Objects_SingleLine = 68,
    TaskDefinition_Form_Objects_MultiLine = 69,
    TaskDefinition_Form_Objects_Number = 70,
    Task_Filter_Status_All = 71,
    Task_Filter_Status_Open = 72,
    Task_Filter_Status_Completed = 73,
    Task_Instance_Status_Finished = 74,
    Task_Instance_Status_Failed = 75,
    Task_Instance_Status_InProgress = 76,
    Task_Instance_Status_Todo = 77,
    TaskDefinition_FormField_Type_Explanation = 78,
    TaskDefinition_FormField_Type_Input = 79,
    TaskDefinition_FormField_Type_SelectInput = 80,
    KnowledgeBases = 81,
    KnowledgeBase_Type_Public = 82,
    KnowledgeBase_Type_Internal = 83,
    KnowledgeBase_Articles = 84,
    SLAs = 85,
    SLA_Notification_Type_Notification = 86,
    SLA_Notification_Type_Email = 87,
    SLA_Type_IRT = 88,
    SLA_Type_MOM = 89,
    ExecutionEnvironments = 90,
    DomainVerifications = 91,
    DataAdapters = 92,
    DataAdapter_Method_Type_Get = 93,
    DataAdapter_Method_Type_Post = 94,
    DataAdapter_LogSeverity_Always = 95,
    DataAdapter_LogSeverity_Failures = 96,
    DataAdapter_LogSeverity_None = 97,
    Extraction_strategy_Unredacted = 98,
    Extraction_strategy_Jmespath = 99,
    EventSubscriptions = 100,
    MetadataComponents = 101,
    MetadataComponent_Option_DataAdapter = 102,
    MetadataComponent_Option_Communicator_History = 103,
    MetadataComponent_Presentation_type_List = 104,
    MetadataComponent_Presentation_type_Smart = 105,
    MetadataComponent_Presentation_type_Raw = 106,
    States_Variables = 107,
    Options_Source_Databag = 108,
    Options_Source_Options = 109,
    Math_Add = 110,
    Math_Subtract = 111,
    Databag_Calculator_Operator_Add = 112,
    Databag_Calculator_Operator_Subtract = 113,
    Databag_Calculator_Operator_Multiply = 114,
    Databag_Calculator_Operator_Divide = 115,
    StorageLocation_Communicator = 116,
    StorageLocation_Workspace = 117,
    StorageLocation_ExecutionEnvironment = 118,
    StorageLocation_Flow = 119,
    StorageLocation_Ticket = 120,
    StorageLocation_Memory = 121,
    StorageLocation_Vault = 122,
    StorageLocation_Tick = 123,
    Collections = 124,
    Dashboards = 125,
    Dashboard_Period_Show_Last_60min = 126,
    Dashboard_Period_Show_Last_24h = 127,
    Dashboard_Period_Show_Last_30d = 128,
    Dashboard_Period_Show_Last_365d = 129,
    Dashboard_Period_Show_Custom = 130,
    Dashboard_Period_Show_Last_known = 131,
    Dashboard_Period_Show_Range_Fixed = 132,
    Dashboard_Period_Show_Range_Periodic = 133,
    Dashboard_appearance_Condition_LessThen = 134,
    Dashboard_appearance_Condition_Equals = 135,
    Dashboard_appearance_Condition_GreaterThen = 136,
    Dashboard_Chart_Data_Value_Type_Count = 137,
    Dashboard_Chart_Data_Value_Type_Min = 138,
    Dashboard_Chart_Data_Value_Type_Max = 139,
    Dashboard_Chart_Data_Value_Type_Average = 140,
    Dashboard_Chart_Type_Bar = 141,
    Dashboard_Chart_Type_Line = 142,
    Dashboard_Chart_Type_Area = 143,
    Dashboard_Tile_Type_MessageBoard = 144,
    Dashboard_Tile_Type_ChartingHeatmapUnfinishedTickets = 145,
    Dashboard_Tile_Type_CounterTicketUnfinished = 146,
    Dashboard_Tile_Type_ChartingTicketUnfinishedVsCompletion = 147,
    Dashboard_Tile_Type_CounterTicketCompletionTime = 148,
    Dashboard_Tile_Type_ChartingTicketWaitingFor = 149,
    Dashboard_Tile_Type_PieTicketCompletedBy = 150,
    Dashboard_Tile_Type_PieTicketLabels = 151,
    Dashboard_Tile_Type_CounterAdapterExecutions = 152,
    Dashboard_Tile_Type_ChartingAdaptersExecutionTime = 153,
    Dashboard_Tile_Type_ChartingAdaptersSuccess = 154,
    Dashboard_Tile_Type_PieAdapterExecutionTime = 155,
    Dashboard_Tile_Type_CharterTasksOpen = 156,
    Dashboard_Tile_Type_PieTasksOpen = 157,
    Dashboard_Tile_Type_CounterTasksCompleted = 158,
    Dashboard_Tile_Type_CounterTasksOverdue = 159,
    Dashboard_Tile_Type_CounterTasksOpen = 160,
    Condition_Element_Type_Group = 161,
    Condition_Element_Type_Single = 162,
    Users = 163,
    User = 164,
    User_Type_User = 165,
    User_Type_Bot = 166,
    Teams = 167,
    Team = 168,
    Authorizations_Team_Explanation = 169,
    Authorizations = 170,
    Authorizations_Type_Workspace = 171,
    Authorizations_Type_WorkspaceVault = 172,
    Authorizations_Type_Process_configuration = 173,
    Authorizations_Type_TechnicalConfiguration = 174,
    Authorizations_Type_Tickets = 175,
    Authorizations_Type_Tasks = 176,
    Authorization_Type_Viewer = 177,
    Authorization_Type_Contributor = 178,
    Authorization_Type_Owner = 179,
    Filters = 180,
    Partner_Program = 181,
    Workspace = 182,
    Subscription = 183,
    CannedResponse = 184,
    CannedResponses = 185,
    App_Validation_Type_Text = 186,
    App_Validation_Type_Number = 187,
    App_Validation_Type_Mail = 188,
    App_Validation_Type_Custom = 189,
    App_Loading = 190,
    App_Search = 191,
    App_Add = 192,
    App_Save = 193,
    App_Cancel = 194,
    App_Create = 195,
    App_Rename = 196,
    App_Remove = 197,
    App_Select = 198,
    App_Editor_General = 199,
    App_Title = 200,
    App_Name = 201,
    App_Description = 202,
    App_Required = 203,
    App_Type = 204,
    App_UserPanel_Logout = 205,
    App_UserPanel_LanguagePicker_Title = 206,
    App_UserPanel_Theme = 207,
    App_Workspace_Menu_Group_Members = 208,
    App_Workspace_Menu_Group_Tickets = 209,
    App_Workspace_Menu_Group_Processes = 210,
    App_Workspace_Menu_Group_TechnicalConfiguration = 211,
    App_Workspace_Menu_Group_TickSupport = 212,
    App_Workspace_Menu_Docs = 213,
    App_Workspace_Menu_Community = 214,
    App_TaskList_Filter_Button = 215,
    App_Ticket_Filter_Button = 216,
    App_Ticket_List_Option_Button_Tooltip = 217,
    App_Ticket_List_Filter_Editor_StartedAfter = 218,
    App_Ticket_List_Filter_Editor_Use = 219,
    App_Ticket_List_Filter_Editor_Clear = 220,
    App_FilterIndicator_Title_Multi = 221,
    App_FilterIndicator_Title_Single = 222,
    App_DatabagSelector_Input_Tooltip = 223,
    App_DatabagSelector_Button_Tooltip = 224,
    App_DatabagSelector_Input_AllowCustom_Placeholder = 225,
    App_DatabagSelector_Input_Placeholder = 226,
    App_WorkspaceMenu_Group_Members = 227,
    App_WorkspaceMenu_Group_Tickets = 228,
    App_WorkspaceMenu_Group_Processes = 229,
    App_WorkspaceMenu_Group_TechnicalConfiguration = 230,
    App_WorkspaceMenu_Group_TickSupport = 231,
    App_WorkspaceMenu_Docs = 232,
    App_WorkspaceMenu_Community = 233,
    App_TicketList_Option_Button_Tooltip = 234,
    App_TicketList_FilterEditor_StartedAfter = 235,
    App_TicketList_FilterEditor_Use = 236,
    App_TicketList_FilterEditor_Clear = 237,
    App_TaskList_FilterEditor_StartedAfter = 238,
    App_TaskList_FilterEditor_Use = 239,
    App_TaskList_FilterEditor_Clear = 240,
    App_FlowsPanel_NoData = 241,
    App_FlowsPanel_NoProdData = 242,
    App_FilesPanel_NoData = 243,
    App_ColorsSwatch_RemoveColor = 244,
    App_ReduceSwitch_On_Title = 245,
    App_Ticket_CreatePanel_Subject_Title = 246,
    App_Ticket_CreatePanel_Subject_Placeholder = 247,
    App_Ticket_CreatePanel_Note_Title = 248,
    App_Ticket_CreatePanel_Note_Placeholder = 249,
    App_Ticket_CreatePanel_Assignment_Title = 250,
    App_Ticket_CreatePanel_Flows_AllowStart = 251,
    App_Ticket_CreatePanel_CreateButton = 252,
    App_FlowSelector_NoActiveFlow = 253,
    App_FlowSelector_HasActiveFlow = 254,
    App_Ticket_Header_PreTitle = 255,
    App_Ticket_Header_CompleteButton_Complete = 256,
    App_Ticket_Header_CompleteButton_Completed = 257,
    App_Ticket_Header_NoAssignments = 258,
    App_Ticket_Header_NoLabels = 259,
    App_Ticket_Header_Tooltip_Completed = 260,
    App_Ticket_Header_ShowImportant_All = 261,
    App_Ticket_CommunicationCenter_Option_PublicReply = 262,
    App_Ticket_CommunicationCenter_Option_InternalNote = 263,
    App_Ticket_CommunicationCenter_Option_CannedResponse = 264,
    App_Ticket_MessageSending_Type_External = 265,
    App_Ticket_MessageSending_Type_InternalNote = 266,
    App_Ticket_MessageSending_Type_Public = 267,
    App_Ticket_CommunicationArea_External_Subject = 268,
    App_Ticket_CommunicationArea_External_To = 269,
    App_Ticket_CommunicationArea_Notifications_NoMessage_Title = 270,
    App_Ticket_CommunicationArea_Notifications_NoMessage_Body = 271,
    App_Ticket_Timeline_Message_BusySending = 272,
    App_Ticket_CommunicationArea_Notifications_ChangeType_ToInternal_Title = 273,
    App_Ticket_CommunicationArea_Notifications_ChangeType_ToInternal_Body = 274,
    App_Ticket_CommunicationArea_Shortcut_Public = 275,
    App_Ticket_CommunicationArea_Shortcut_InternalNote = 276,
    App_Ticket_CommunicationArea_Shortcut_External = 277,
    App_Ticket_CommunicationArea_Shortcut_Canned_responses = 278,
    App_Ticket_CommunicationArea_Shortcut_Flows = 279,
    App_Ticket_CommunicationArea_Shortcut_Assignments = 280,
    App_Ticket_CommunicationArea_Shortcut_Complete = 281,
    App_Ticket_CommunicationArea_Shortcut_Labels = 282,
    App_CollectionsViewer_Everything = 283,
    App_CollectionsViewer_NoData = 284,
    App_FileDropzone_DropMessage_Active_Allow_Multiple = 285,
    App_FileDropzone_DropMessage_Active_Allow_Single = 286,
    App_FileDropzone_DropMessage_InActive_Allow_Multiple = 287,
    App_FileDropzone_DropMessage_InActive_Allow_Single = 288,
    App_UserEditor_MakeAdmin = 289,
    App_UserEditor = 290,
    App_UserEditor_RemoveAsAdmin = 291,
    App_UserEditor_PublicInfo_Title = 292,
    App_UserEditor_PublicInfo_Explainer = 293,
    App_UserEditor_AvatarPicker_Choose = 294,
    App_UserEditor_PublicInfo_Name_Title = 295,
    App_UserEditor_PublicInfo_Name_Placeholder = 296,
    App_UserEditor_Internal_Title = 297,
    App_UserEditor_Internal_Name_Title = 298,
    App_UserEditor_Internal_Name_Placeholder = 299,
    App_UserEditor_Internal_Handle_Title = 300,
    App_UserEditor_Internal_Handle_Placeholder = 301,
    App_UserEditor_Internal_Handle_Explainer = 302,
    App_UserEditor_Security_Explainer = 303,
    App_UserEditor_Security_Username_Title = 304,
    App_UserEditor_Security_Username_Placeholer = 305,
    App_UserEditor_Security_Recovery_Email_Title = 306,
    App_UserEditor_Security_Recovery_Email_Placeholder = 307,
    App_UserEditor_Security_Reset_Password_Title = 308,
    App_TeamEditor_Members_NoData = 309,
    App_TeamEditor_Members_Add = 310,
    App_TeamEditor_Members_Member = 311,
    App_TeamEditor_Delete_Question = 312,
    App_CannedResponseEditor_Explanation = 313,
    App_LabelsEditor_Explanation = 314,
    App_LabelsEditor_ShowDeleted_Title = 315,
    App_LabelsEditor_ShowDeleted_ActivateButton = 316,
    App_LabelsEditor_NoColor_Explanation = 317,
    App_FileEditor_Preview_Title = 318,
    App_TaskDefinitionEditor_Outcomes_Title = 319,
    App_TaskDefinitionEditor_Outcomes_Explanation = 320,
    App_TaskDefinitionEditor_Form_Explanation = 321,
    App_TaskDefinitionEditor_Form_Explanation_Default = 322,
    App_TaskDefinitionEditor_Form_Section_Default = 323,
    App_TaskDefinitionEditor_Form_Input_Default = 324,
    App_TaskDefinitionEditor_Action_Remove_Confirm = 325,
    App_TaskDefinitionEditor_Action_NewTitle = 326,
    App_TaskDefinitionEditor_Panel_Outcome_Title = 327,
    App_TaskDefinitionEditor_Panel_Capture_Title = 328,
    App_TaskDefinitionEditor_Panel_Capture_Validation_Type = 329,
    App_TaskDefinitionEditor_Panel_Capture_Validation_Type_Custom = 330,
    App_TaskDefinitionEditor_Panel_Capture_Validation_Message = 331,
    App_TaskDefinitionEditor_Panel_Select_Listoptions_Title = 332,
    App_KnowledgeBaseArticleEditor_Explanation = 333,
    App_KnowledgeBaseArticleEditor_Publish_Title = 334,
    App_KnowledgeBaseArticleEditor_Tags_Title = 335,
    App_KnowledgeBaseArticleEditor_Summary_Placeholder = 336,
    App_KnowledgeBaseArticleEditor_Article_Placeholder = 337,
    App_Channels_NoData = 338,
    App_ChannelEditor_Preview = 339,
    App_ChannelEditor_Inbound_Title = 340,
    App_ChannelEditor_Outbound_Title = 341,
    App_ChannelEditor_Generic_Title = 342,
    App_ChannelEditor_Generic_Explanation = 343,
    App_ChannelEditor_Assignments_Title = 344,
    App_ChannelEditor_Assignments_Explanation = 345,
    App_ChannelEditor_Assignments_Use_Title = 346,
    App_ChannelEditor_Assignments_Use_Warning = 347,
    App_ChannelEditor_Routing_Title = 348,
    App_ChannelEditor_Routing_Explanation = 349,
    App_ChannelEditor_Routing_Address = 350,
    App_ChannelEditor_Routing_Assignments_Title = 351,
    App_ChannelEditor_Routing_Assignments_To = 352,
    App_SLAEditor_Active_Title = 353,
    App_SLAEditor_Ready_For_Active_Title = 354,
    App_SLAEditor_Active_IsActive = 355,
    App_SLAEditor_Active_From_Title = 356,
    App_SLAEditor_Active_To_Title = 357,
    App_SLAEditor_StartCriteria_Title = 358,
    App_SLAEditor_StartCriteria_Explanation = 359,
    App_SLAEditor_For_Channels_Title = 360,
    App_SLAEditor_TriggerRequirements_Title = 361,
    App_SLAEditor_TriggerRequirements_conditions_Title = 362,
    App_SLAEditor_Skip_requirements_Title = 363,
    App_SLAEditor_FailureSettings_Title = 364,
    App_SLAEditor_FailureSettings_Timeline_Title = 365,
    App_SLAEditor_FailureSettings_NoData = 366,
    App_SLAEditor_FailureChart_Title = 367,
    App_ExecutionEnvironmentEditor_Set_As_Prod_Title = 368,
    App_ExecutionEnvironmentEditor_Set_As_Default_Creation_Title = 369,
    App_DomainVerificationsEditor_Title = 370,
    App_DomainVerificationsEditor_Explanation = 371,
    App_DomainVerificationsEditor_Button_Title = 372,
    App_DataAdapterEditor_Chart_Title = 373,
    App_DataAdapterEditor_Execution_Title = 374,
    App_DataAdapterEditor_Execution_Retry_Title = 375,
    App_DataAdapterEditor_Execution_Headers_Title = 376,
    App_DataAdapterEditor_Execution_Headers_Auth_Title = 377,
    App_DataAdapterEditor_Execution_Body_Title = 378,
    App_DataAdapterEditor_Execution_Try_Title = 379,
    App_DataAdapterEditor_Result_Action_Title = 380,
    App_EventSubscriptionEditor_Explanation = 381,
    App_EventSubscriptionEditor_Trigger_Title = 382,
    App_EventSubscriptionEditor_Active_Title = 383,
    App_EventSubscriptionEditor_Stats_Title = 384,
    App_EventSubscriptionEditor_Execution_Title = 385,
    App_EventSubscriptionEditor_Execution_Retry_Title = 386,
    App_MetaDataComponentEditor_Weight_Title = 387,
    App_MetaDataComponentEditor_Active_Title = 388,
    App_MetaDataComponentEditor_StartCriteria_Title = 389,
    App_MetaDataComponentEditor_StartCriteria_Explanation = 390,
    App_MetaDataComponentEditor_StartCriteria_Start_Title = 391,
    App_MetaDataComponentEditor_StartCriteria_Skip_Title = 392,
    App_MetaDataComponentEditor_StartCriteria_Conditions_Title = 393,
    App_MetaDataComponentEditor_Source_Title = 394,
    App_MetaDataComponentEditor_Source_IsTick_Title = 395,
    Flow = 396,
    File = 397,
    DataAdapter = 398,
    Communication_Type_FacebookMessenger = 399,
    App_Notification = 400,
    App_Ticket_Header_ShowImportant_ImportantOnly = 401,
    App_Ticket_CommunicationArea_Dropdown_Title = 402,
    APP_SidebarPanel_Open_Title = 403,
    APP_SidebarPanel_Close_Title = 404,
    APP_SidebarPanel_Closed_Title = 405,
    APP_TickDropdown_NoResults_Title = 406,
    APP_RTCIndicator_InSync = 407,
    APP_RTCIndicator_NotInSync = 408,
    APP_TypingIndicator_Typing_Someone = 409,
    APP_TypingIndicator_Typing_Multiple = 410,
    Authorization_Indicator_Viewer_Explanation = 411,
    Authorization_Indicator_Contributor_Explanation = 412,
    Authorization_Indicator_Owner_Explanation = 413,
    AuthorizationRowEditor_Owner_Explanation = 414,
    AuthorizationRowEditor_Option_NoRights = 415,
    App_ChatWidgetStylePanel_UseBackgroundColor = 416,
    App_ChatWidgetStylePanel_BackgroundColor = 417,
    App_ChatWidgetStylePanel_ForeGroundColor = 418,
    App_ChatWidgetStylePanel_ShadowSize = 419,
    App_ChatWidgetStylePanel_FontFamily = 420,
    App_ChatWidgetStylePanel_FontSize = 421,
    App_ChatWidgetStylePanel_LinkRoundness = 422,
    App_ChatWidgetStylePanel_ShowBorder = 423,
    App_ChatWidgetStylePanel_BorderColor = 424,
    App_ChatWidgetStylePanel_Title = 425,
    App_ChannelLabel_Inactive = 426,
    App_ChannelEditor_Chatwidget_Installation_Explanation = 427,
    App_ChannelEditor_Chatwidget_Installation_Step1_Explanation = 428,
    App_ChannelEditor_Chatwidget_Installation_Step2_Explanation = 429,
    App_Copy = 430,
    App_ChannelEditor_Chatwidget_Installation_PreviewButton_Title = 431,
    App_ChannelEditor_Chatwidget_MaxWidth = 432,
    App_ChannelEditor_Chatwidget_MaxHeight = 433,
    App_ChannelEditor_Chatwidget_WidgetBackground_Uploader_Explanation = 434,
    App_ChannelEditor_Installation_Title = 435,
    App_ChannelEditor_Customization_Title = 436,
    App_ChannelEditor_Opener_Title = 437,
    App_ChannelEditor_Opener_Type = 438,
    App_ChannelEditor_Opener_StylingButton_Title = 439,
    App_ChannelEditor_Widget_StylingButton_Title = 440,
    App_ChannelEditor_WidgetHeader_StylingButton_Title = 441,
    App_ChannelEditor_WidgetButtons_StylingButton_Title = 442,
    App_ChannelEditor_Chatwidget_WidgetBackground_Uploader_Title = 443,
    App_ChannelEditor_Chatwidget_OpenerBackground_Uploader_Title = 444,
    App_ChannelEditor_Chatwidget_OpenerBackground_Uploader_Explanation = 445,
    App_ChannelEditor_Chatwidget_Lobby_Title = 446,
    App_ChannelEditor_Chatwidget_Messaging_ShowAvatars = 447,
    App_ChannelEditor_Chatwidget_Messaging_ShowAllMessagesLeft = 448,
    App_ChannelEditor_Chatwidget_Messaging_ShowFileUploader = 449,
    App_ChannelEditor_Chatwidget_Messaging_StylingButton_Inbound = 450,
    App_ChannelEditor_Chatwidget_Messaging_StylingButton_Outbound = 451,
    App_ChannelEditor_Chatwidget_Messaging_StylingButton_ConversationActions = 452,
    App_ChannelEditor_Chatwidget_Messaging_StylingButton_MessageBox = 453,
    App_ChannelEditor_Chatwidget_OpeningHours_Title = 454,
    App_ChannelEditor_Chatwidget_OpeningHours_Explanation = 455,
    App_ChannelEditor_Chatwidget_OpeningHours_Use = 456,
    Monday = 457,
    Tuesday = 458,
    Wednesday = 459,
    Thursday = 460,
    Friday = 461,
    Saturday = 462,
    Sunday = 463,
    App_ChannelEditor_Chatwidget_Tabs_General = 464,
    App_ChannelEditor_Chatwidget_Tabs_Opener = 465,
    App_ChannelEditor_Chatwidget_Tabs_Lobby = 466,
    App_ChannelEditor_Chatwidget_Tabs_Messaging = 467,
    App_ChannelEditor_Chatwidget_Opener_Layout_Square = 468,
    App_ChannelEditor_Chatwidget_Opener_Layout_Landscape = 469,
    App_ChannelEditor_LobbyAction_Text = 470,
    App_ChannelEditor_LobbyAction_TextApp_ChannelEditor_LobbyAction_Text = 471,
    App_ChannelEditor_LobbyAction_StartFlow = 472,
    App_ChannelEditor_Chatwidget_OpeningHoursEditor_AllDay = 473,
    App_ChannelEditor_Chatwidget_OpeningHoursEditor_Until = 474,
    App_EmailEditor_EmailAddress = 475,
    App_EmailEditor_SendgridToken = 476,
    App_EmailEditor_BusyChecking = 477,
    App_EmailEditor_Template = 478,
    App_FacebookMessengerEditor_PageId = 479,
    App_FacebookMessengerEditor_PageAccessToken = 480,
    App_FacebookMessengerEditor_BusyChecking = 481,
    App_TelegramEditor_Token = 482,
    App_TelegramEditor_BusyChecking = 483,
    App_TelegramEditor_PreviewLink = 484,
    App_CollectionsViewer_NoFilteredData = 485,
    App_CollectionsViewer_DeleteConfirmation = 486,
    App_Charting_NoData = 487,
    App_ExecutionEnvironment_Production = 488,
    App_Charting_UpdatedTo_Text = 489,
    SLA = 490,
    App_Charting_Statistic_Title = 491,
    App_Charting_Statistic_AutoColorPerSubject_Title = 492,
    App_Charting_YAxis_Value = 493,
    App_Charting_PresentationType = 494,
    App_Charting_Period_Title = 495,
    App_Charting_Resolution_Title = 496,
    App_Charting_DateRange_Custom = 497,
    App_Charting_CustomDateRange_Title = 498,
    App_Charting_From = 499,
    App_Charting_To = 500,
    App_ChartingEditor_StackSeries = 501,
    App_ChartingEditor_AddSerie_Title = 502,
    App_ChartingEditor_AppearanceRuleEditor_Consequence = 503,
    App_ChartingEditor_AppearanceRuleEditor_IfValueIs = 504,
    App_ChartingEditor_TimeBasedTip_Explanation = 505,
    Dashboard = 506,
    DashboardEditor_Tile_SettingsMenu_EditSettings = 507,
    DashboardEditor_Tile_SettingsMenu_Resize = 508,
    DashboardEditor_Tile_SettingsMenu_Remove = 509,
    App_DataAdapterEditor_ResultAction_Strategy_Title = 510,
    App_DataAdapterEditor_ResultAction_Strategy_JmesPath_Explainer = 511,
    App_DataAdapter_AdapterLogsList_Title = 512,
    App_DataAdapter_AdapterLogsList_Date = 513,
    App_DataAdapter_AdapterLogsList_Duration = 514,
    App_DataAdapterEditor_ResultAction_StoreAt = 515,
    App_ChartingEditor_HeatmapApperanceRule_Name = 516,
    App_ChartingEditor_HeatmapApperanceRule_From = 517,
    App_ChartingEditor_HeatmapApperanceRule_To = 518,
    App_Charting_Statistic_ValueToPresent = 519,
    App_DatabagItemDefinitionEditor_OnlyEditHere = 520,
    App_DatabagItemDefinitionEditor_Path = 521,
    App_DatabagItemDefinitionEditor_Searchable = 522,
    App_DatabagItemDefinitionEditor_Vault_Explanation = 523,
    App_DatabagItemDefinitionEditor_Workspace_Explanation = 524,
    App_DatabagItemDefinitionEditor_Tick_Explanation = 525,
    App_DatabagItemDefinitionEditor_Others_Explanation = 526,
    App_DatabagItemDefinitionEditor_DefaultValue = 527,
    DocuBlocks_ReadMore = 528,
    ExecutionEnvironmentEditor_ConfirmDelete = 529,
    ExecutionEnvironmentEditor_ConfirmSetAsProduction = 530,
    App_Done = 531,
    App_Value = 532,
    App_ChartingEditor_Series_Title = 533,
    App_ChartingEditor_CustomDateRanges_Title = 534,
    App_ChartingEditor_Appearance_Title = 535,
    App_MessageBoardEditor_Title = 536,
    App_FlowEditor_ActionView_AddTask_IsAsync_Title = 537,
    App_FlowEditor_ActionView_AddTask_HasTask_Title = 538,
    App_FlowEditor_ActionView_AddTask_OnCancelRoute_Title = 539,
    App_FlowEditor_ActionView_AddTask_Route_Anonymous = 540,
    App_FlowEditor_ActionView_DatabagCalculation_Calculus = 541,
    App_FlowEditor_ActionView_OnResponseTimeout = 542,
    App_FlowEditor_ActionView_MessageChoice_FromDatabag = 543,
    App_FlowEditor_QuestionReply_HasExtractionStrategy_Title = 544,
    App_FlowEditor_Knowledgebase_SearchIn = 545,
    App_FlowEditor_Knowledgebase_ShowMaxResults_Title = 546,
    App_FlowEditor_Knowledgebase_Route_NoArticleFound = 547,
    App_FlowEditor_Assignments_ResetFirst = 548,
    App_FlowEditor_Assignments_UnAssign = 549,
    App_FlowEditor_Assignments_Assign = 550,
    App_FlowEditor_Assignments_OnlyUnAssign = 551,
    App_FlowEditor_Assignments_Random = 552,
    App_FlowEditor_Assignments_Random_FromTeam = 553,
    App_FlowEditor_Assignments_Random_PreferOnline = 554,
    App_FlowEditor_Assignments_Random_PreferOnline_FromTeam = 555,
    App_FlowEditor_StartNode_Manual_Tooltip = 556,
    App_FlowEditor_StartNode_Manual_Title = 557,
    App_FlowEditor_StartNode_Auto_Tooltip = 558,
    App_FlowEditor_StartNode_Auto_Title = 559,
    App_FlowEditor_StartNode_ToggleActive_Confirmation = 560,
    App_CommentButton_Comment_Single_Tooltip = 561,
    App_CommentButton_Comment_Plural_Tooltip = 562,
    App_FlowEditor_Deactivate = 563,
    App_FlowEditor_Activate = 564,
    App_FlowEditor_Test = 565,
    App_FlowEditor_StartNode_ContextMenu_Title = 566,
    App_Use = 567,
    App_FlowEditor_StartNode_Noname_Title = 568,
    App_FlowEditor_StepNode_NoActions_NoTargetStep_Title = 569,
    App_FlowEditor_StepNode_NoActions_NoTargetStep_Explanation = 570,
    App_FlowEditor_StepNode_NoActions_NoTargetStep_CallToAction = 571,
    App_FlowEditor_StepNode_ToggleSize = 572,
    App_FlowEditor_StepNode_AddAction = 573,
    App_FlowEditor_StepNode_ContextMenu_Title = 574,
    App_FlowEditor_ChoiceOptionEditor_Text_Title = 575,
    App_FlowEditor_ChoiceOptionEditor_Text_Placeholder = 576,
    App_FlowEditor_ChoiceOptionEditor_Data_Title = 577,
    App_FlowEditor_ChoiceOptionEditor_Data_Placeholder = 578,
    App_FlowEditor_ConditionEditorPanel_Title = 579,
    App_CommentsPanel_Title = 580,
    App_CommentsPanel_ResolveAll = 581,
    App_CommentsPanel_NoData = 582,
    App_CommentsPanel_HandleTip = 583,
    App_TestPanel_Title = 584,
    App_TestPanel_Explanation = 585,
    App_TestPanel_Copy_Explanation = 586,
    App_TestPanel_Example = 587,
    App_TestPanel_Channel_Explanation = 588,
    App_TestPanel_Channel_StartButton_Title = 589,
    App_ConditiongroupEditor_AddCondition = 590,
    App_ConditiongroupEditor_AddConditionGroup = 591,
    ConditionLogicalOperator_And = 592,
    ConditionLogicalOperator_Any = 593,
    Condition_If = 594,
    App_FlowEditor_ActionDelayEditor_Prefix = 595,
    App_FlowEditor_ActionDelayEditor_Sufffix = 596,
    App_FlowEditor_WaitingAttempt_Prefix = 597,
    App_FlowEditor_WaitingAttempt_FinishWaiting_Explanation = 598,
    App_FlowEditor_WaitingAttempt_AddButton_Title = 599,
    App_FlowEditor_SideBar_AddTask_Task_Title = 600,
    App_FlowEditor_SideBar_AddTask_Task_Explanation = 601,
    App_FlowEditor_SideBar_AddTask_WaitForFinish = 602,
    App_FlowEditor_SideBar_AddTask_Assign_Title = 603,
    App_FlowEditor_SideBar_AddTask_Assign_Explanation = 604,
    App_FlowEditor_SideBar_AddTask_Note_Title = 605,
    App_FlowEditor_SideBar_AddTask_Note_Explanation = 606,
    App_FlowEditor_SideBar_AddTask_Timing_Title = 607,
    App_FlowEditor_SideBar_AddTask_Timing_Explanation = 608,
    App_FlowEditor_SideBar_AddTask_Timing_Delay_Title = 609,
    App_FlowEditor_SideBar_AddTask_Timing_UseOverdue_Title = 610,
    App_FlowEditor_SideBar_ConditionalNavigate_Title = 611,
    App_FlowEditor_SideBar_ConditionalNavigate_Explanation = 612,
    App_FlowEditor_SideBar_DataAdapter_Title = 613,
    App_FlowEditor_SideBar_DataAdapter_Explanation = 614,
    App_FlowEditor_SideBar_DataAdapter_EditAdapter = 615,
    App_FlowEditor_SideBar_Calculate_Title = 616,
    App_FlowEditor_SideBar_Calculate_Explanation = 617,
    App_FlowEditor_SideBar_Calculate_Limits_Title = 618,
    App_FlowEditor_SideBar_Calculate_Storage_Title = 619,
    App_FlowEditor_StepNode_NoActions_Title = 620,
    App_FlowEditor_StepNode_NoActions_Explanation = 621,
    App_FlowEditor_SideBar_FlowNavigate_Title = 622,
    App_FlowEditor_SideBar_FlowNavigate_Explanation = 623,
    App_FlowEditor_SideBar_Message_Title = 624,
    States_Variable = 625,
    App_FlowEditor_SideBar_Message_MarkDown_Placeholder = 626,
    App_FlowEditor_SideBar_Message_AttachmentsSelector_NoResults = 627,
    App_FlowEditor_SideBar_Message_Sender_Title = 628,
    App_FlowEditor_SideBar_Message_Sender_UseCustom_Title = 629,
    App_FlowEditor_SideBar_Message_Sender_NoCustom_Title = 630,
    App_FlowEditor_SideBar_Choice_Title = 631,
    App_FlowEditor_SideBar_Choice_MarkDown_Placeholder = 632,
    App_FlowEditor_SideBar_Choice_Options_Title = 633,
    App_FlowEditor_SideBar_Choice_Options_Databag_Explanation = 634,
    App_FlowEditor_SideBar_Choice_DatabagMapping_Title = 635,
    App_FlowEditor_SideBar_Choice_Storage_Title = 636,
    App_FlowEditor_SideBar_Choice_Storage_Textual_Title = 637,
    App_FlowEditor_SideBar_Choice_Storage_Value_Title = 638,
    App_FlowEditor_SideBar_AwaitAttempt_Title = 639,
    App_FlowEditor_SideBar_AwaitAttempt_Explanation = 640,
    App_FlowEditor_SideBar_Assignments_Random_FromTeam_Selector_Empty_Title = 641,
    App_FlowEditor_SideBar_Assignments_Random_FromTeam_Selector_Title = 642,
    App_FlowEditor_SideBar_Assignments_Random_FromTeam_Title = 643,
    App_FlowEditor_SideBar_Assignments_Random_PreferOnline = 644,
    App_FlowEditor_SideBar_Assignments_Random_Explanation = 645,
    App_FlowEditor_SideBar_Response_Echo_Title = 646,
    App_FlowEditor_SideBar_Response_Echo_Explanation = 647,
    App_FlowEditor_SideBar_Response_Echo_Valid_Title = 648,
    App_FlowEditor_SideBar_Response_Echo_InValid_Title = 649,
    App_FlowEditor_SideBar_Knowledgebase_Title = 650,
    App_FlowEditor_SideBar_Knowledgebase_Markdown_Placeholder = 651,
    App_FlowEditor_SideBar_Knowledgebase_KnowledgeBaseSelection_Title = 652,
    App_FlowEditor_SideBar_Knowledgebase_KnowledgeBaseSelection_NoData_Title = 653,
    App_FlowEditor_SideBar_Knowledgebase_KnowledgeBaseSelection_NoKnowledgebases_Title = 654,
    App_FlowEditor_SideBar_Knowledgebase_MaxNrResults_Title = 655,
    App_FlowEditor_SideBar_Knowledgebase_ReadArticle_Title = 656,
    App_FlowEditor_SideBar_Knowledgebase_Echo_OnValidAnswer_Title = 657,
    App_FlowEditor_SideBar_Knowledgebase_Echo_NoArticlesFound_Title = 658,
    App_FlowEditor_SideBar_Question_Storage_Title = 659,
    App_FlowEditor_SideBar_InternalNote_Title = 660,
    App_FlowEditor_SideBar_InternalNote_Attachments_Placeholder = 661,
    App_FlowEditor_SideBar_InternalNote_Attachments_NoResults = 662,
    App_FlowEditor_SideBar_Assignments_Title = 663,
    App_FlowEditor_SideBar_Assignments_Explanation = 664,
    App_FlowEditor_SideBar_Assignments_ResetButton_Title = 665,
    App_FlowEditor_SideBar_Assignments_UsersAndTeams_Selector_Title = 666,
    App_FlowEditor_SideBar_Assignments_UnAssign_Title = 667,
    App_FlowEditor_SideBar_Assignments_UnAssign_selector_Placeholder = 668,
    App_FlowEditor_SideBar_Assignments_Assign_Title = 669,
    App_FlowEditor_SideBar_Assignments_Random_Title = 670,
    App_FlowEditor_SideBar_Labels_Remove_Title = 671,
    App_FlowEditor_SideBar_Labels_Remove_Explanation = 672,
    App_FlowEditor_SideBar_Labels_Add_Title = 673,
    App_FlowEditor_SideBar_Labels_Add_Explanation = 674,
    App_FlowEditor_SideBar_CompleteTicket_Title = 675,
    App_FlowEditor_SideBar_CompleteTicket_Explanation = 676,
    App_FlowEditor_SideBar_CompleteTicket_Confirm = 677,
    App_FlowEditor_SideBar_RenameTicket_Ticket = 678,
    App_FlowEditor_SideBar_Action_Name_Placeholder = 679,
    App_FlowEditor_SideBar_EditorsNote_Title = 680,
    App_FlowEditor_SideBar_EditorsNote_Explanation = 681,
    App_FlowEditor_SideBar_Flow_IsActiveFlow = 682,
    App_FlowEditor_SideBar_Flow_CopyTo_Placeholder = 683,
    App_FlowEditor_SideBar_Flow_CopyTo_PanelTitle = 684,
    App_FlowEditor_SideBar_Flow_StartCriteria = 685,
    App_FlowEditor_SideBar_Flow_ChannelsSelector_Title = 686,
    App_FlowEditor_SideBar_Flow_Conditions_Title = 687,
    App_FlowEditor_SideBar_Flow_StartConditions_Title = 688,
    App_FlowEditor_SideBar_Flow_SkipConditions_Title = 689,
    App_FlowEditor_SideBar_Flow_DefaultSender_Title = 690,
    App_FlowEditor_SideBar_Flow_DefaultSenderSelector_Title = 691,
    App_FlowEditor_SideBar_Flow_NoActions = 692,
    App_FlowEditor_SideBar_Flow_SingularAction = 693,
    App_FlowEditor_SideBar_Flow_PluralActions = 694,
    App_NoConnection_Title = 695,
    App_FlowEditor_Deleted_Title = 696,
    App_FlowEditor_Delete_Confirmation = 697,
    App_NotificationMentionListItem_MentionsYou = 698,
    App_NotificationMentionListItem_Resolve = 699,
    App_NotificationMentionListItem_Ticket_Button_Title = 700,
    App_NotificationMentionListItem_Unknown_Button_Title = 701,
    App_NotificationsList_NoData_Title = 702,
    App_InternetDomainEditor_LastCheck = 703,
    App_InternetDomainEditor_VerifiedDate = 704,
    App_InternetDomainEditor_EmailVerification_Title = 705,
    App_InternetDomainEditor_EmailVerification_Explanation = 706,
    App_InternetDomainEditor_EmailVerification_Button_Title = 707,
    App_InternetDomainEditor_DNSVerification_Title = 708,
    App_InternetDomainEditor_DNSVerification_Explanation = 709,
    App_InternetDomainEditor_Verified = 710,
    App_InternetDomainEditor_Rejected = 711,
    App_InternetDomainEditor_Waiting = 712,
    App_KnowledgebaseEditor_PublishedArticle_Title = 713,
    App_KnowledgebaseEditor_NotPublishedArticle_Title = 714,
    App_MetaDataComponentWrapper_Failed = 715,
    App_MetaDataComponentEditor_AdapterSource_StorageLocation_Title = 716,
    App_MetaDataComponentEditor_AdapterSource_Mapping_Title = 717,
    App_MetaDataComponentEditor_AdapterSource_Mapping_Prefill_Title = 718,
    App_MetaDataComponentEditor_AdapterSource_Mapping_FromStorageLocation = 719,
    App_MetaDataComponentEditor_AdapterSource_ExtractionStrategy_Title = 720,
    App_MetaDataComponentEditor_AdapterSource_ExtractionStrategy_Placeholder = 721,
    App_MetaDataComponentEditor_AdapterSource_SampleData_Title = 722,
    App_MetaDataComponentEditor_AdapterSource_SampleData_Transformed_Title = 723,
    App_MetaDataComponentEditor_ConfigureBeforeActivate_Explanation = 724,
    App_MetaDataComponentEditor_ReadyForActivate_Explanation = 725,
    App_MetaDataComponentEditor_Activated_Explanation = 726,
    App_PartnershipEditor_EndPartnership_Title = 727,
    App_PartnershipEditor_StartAffiliatePartnership_Title = 728,
    App_PartnershipEditor_StartAffiliatePartnership_Explanation = 729,
    App_PartnershipEditor_StartAffiliatePartnership_PayForSubtenants_Title = 730,
    App_PartnershipEditor_StartAffiliatePartnership_PayForSubtenants_MandateRequired_Title = 731,
    App_PartnershipEditor_StartAffiliatePartnership_Email_Title = 732,
    App_PartnershipEditor_StartAffiliatePartnership_StartButton_Title = 733,
    App_PartnershipEditor_TenantsCounter_Title = 734,
    App_PartnershipEditor_RegisterSubTenant_Title = 735,
    App_PartnershipEditor_RegisterSubTenant_Explanation = 736,
    App_PartnershipEditor_RegisterSubTenant_RegisterButton_Title = 737,
    App_PartnershipEditor_RegisterSubTenant_RegisterUrl_Prefix = 738,
    App_PartnershipEditor_EndPartnership_Confirmation = 739,
    Tenants = 740,
    App_SalesUpsellFeatureBlock_Title = 741,
    App_SalesUpsellFeatureBlock_IsAdmin_Explanation = 742,
    App_SalesUpsellFeatureBlock_IsNotAdmin_Explanation = 743,
    App_SalesUpsellFeatureBlock_ViewPlansButton = 744,
    App_SearchResultsPanel_Title = 745,
    KnowledgeBase = 746,
    ExecutionEnvironment = 747,
    App_Search_Placeholder = 748,
    App_Search_FoundInWorkspace = 749,
    App_Search_LocalItems = 750,
    NoResults = 751,
    Select = 752,
    App_UserTeamSelector_EmptyLabel = 753,
    App_SLAEditor_SuccessSettings_Title = 754,
    App_SLAEditor_MOMSuccessSettings_Explanation = 755,
    App_SLAEditor_MOMSuccessSettings_Prefix = 756,
    App_SLAEditor_MOMSuccessSettings_Suffix = 757,
    App_SLAEditor_IRTSuccessSettings_Explanation = 758,
    App_SLAEditor_IRTSuccessSettings_Prefix = 759,
    App_SLAEditor_IRTSuccessSettings_Suffix = 760,
    App_SLAEditor_IRTCountDownSettings_Prefix = 761,
    App_SLAEditor_IRTCountDownSettings_Suffix = 762,
    App_CommunicatorSelector_Placeholder = 763,
    App_BillingPlanNumericItem_Breakdown_Ticket_Title = 764,
    App_BillingPlanNumericItem_Breakdown_Other_Title = 765,
    Unlimited = 766,
    Max = 767,
    App_BillingInvoiceListItem_PayButton_Tooltip = 768,
    App_BillingInvoiceListItem_PayButton_Title = 769,
    App_BillingInvoiceListItem_Download_OnlyForTenant_Title = 770,
    App_BillingInvoiceListItem_Download_Title = 771,
    App_BillingInvoiceStatusLabel_Paid = 772,
    App_BillingInvoiceStatusLabel_Pending = 773,
    App_BillingInvoiceStatusLabel_ReadyForAutoCollection = 774,
    App_BillingInvoiceStatusLabel_ReadyForManualCollection = 775,
    App_Subscription_PlanCreditItem_Title = 776,
    App_Subscription_PlanCreditItem_Breakdown = 777,
    App_Subscription_PlanDataNumericItem_Unlimited_Tooltip = 778,
    App_SubscriptionEditor_RemoveTenant_Title = 779,
    App_SubscriptionEditor_CustomPlanSelected_Explanation = 780,
    App_SubscriptionEditor_FreeLanSelected_Explanation = 781,
    App_SubscriptionEditor_BillingName_Title = 782,
    App_SubscriptionEditor_BillingEmail_Title = 783,
    App_SubscriptionEditor_BillingBreakdown_Title = 784,
    App_SubscriptionEditor_BillingDescription = 785,
    App_SubscriptionEditor_BillingPeriodExplanation = 786,
    App_SubscriptionEditor_CurrentPlan_BillingDescription = 787,
    App_SubscriptionEditor_StartPlan_Button_Title = 788,
    App_SubscriptionPlanItem_Indicator_Title = 789,
    App_TaskDefinitionEditor_DataOptionPanel_Text = 790,
    App_TaskDefinitionEditor_DataOptionPanel_Value = 791,
    App_TaskDefinitionEditor_Storage_Title = 792,
    App_TaskDefinitionEditor_Validation_Title = 793,
    App_TaskDefinitionEditor_Section_Title = 794,
    App_TaskDefinitionEditor_SectionEdit_Title = 795,
    App_TenantSettingsMenu_Title = 796,
    App_TenantSettingsMenu_Subscription_Title = 797,
    App_TenantSettingsMenu_Spending_Title = 798,
    App_TenantSettingsMenu_Billing_Title = 799,
    App_TenantSettingsMenu_PartnerDashboard_Title = 800,
    App_TenantSettingsMenu_PartnerProgram_Title = 801,
    App_TaskDefinitionEditor_TaskForm_Title = 802,
    App_ViewOptions_Title = 803,
    TaskList_ViewOptions_Note = 804,
    TaskList_ViewOptions_OverdueDuate = 805,
    App_TaskInstanceEditor_IniatedBy_Title = 806,
    App_TaskInstanceEditor_CompletedBy_Title = 807,
    App_TaskInstanceEditor_TicketButton_Title = 808,
    App_TaskInstanceEditor_GenericFinishButton_Title = 809,
    App_TaskInstanceEditor_SaveButton_Tooltip_Title = 810,
    App_EndOfList = 811,
    App_LoadMore = 812,
    App_Searching = 813,
    App_TeamEditor_Members_Title = 814,
    App_Found_Title = 815,
    App_Clear = 816,
    App_Assignment_Assigned = 817,
    App_Assignment_BySomething = 818,
    App_Assignment_Verb_Assigned = 819,
    App_Assignment_Verb_UnAssigned = 820,
    TaskNote = 821,
    App_Sending = 822,
    App_A_Something = 823,
    App_TicketTimeline_Added = 824,
    App_TicketTimeline_Removed = 825,
    App_TicketTimeline_Sla_Failure_Title = 826,
    App_TicketTimeline_SystemMessage_By_Title = 827,
    App_Ticket_CommunicationArea_Notifications_DropZoneTitle = 828,
    App_Ticket_CommunicationArea_Message_Public_Placeholder = 829,
    App_Ticket_CommunicationArea_Message_InternalNote_Placeholder = 830,
    App_Ticket_CommunicationArea_Message_External_Placeholder = 831,
    App_Ticket_CommunicationArea_Send_Tooltip = 832,
    App_Ticket_CommunicationArea_Send_Title = 833,
    App_TicketEditor_Complete = 834,
    App_TicketList_NothingFound = 835,
    App_Handle = 836,
    App_UserCreator_Username_Title = 837,
    App_UserCreator_Email_Title = 838,
    App_UserCreator_Create_Title = 839,
    App_ActiveFlowPanel_Title = 840,
    App_ActiveFlowPanel_ForceAbortFlow_Title = 841,
    App_AdapterLogDetailsPanel_Title = 842,
    App_AdapterLogDetailsPanel_HttpStatus_Title = 843,
    App_AdapterLogDetailsPanel_RequestHeaders_Title = 844,
    App_AdapterLogDetailsPanel_RequestHeaders_Key_Title = 845,
    App_AdapterLogDetailsPanel_RequestHeaders_Value_Title = 846,
    App_AdapterLogDetailsPanel_NoRequestHeaders_Title = 847,
    App_AdapterLogDetailsPanel_RequestBody_Title = 848,
    App_AdapterLogDetailsPanel_NoRequestBody_Title = 849,
    App_AdapterLogDetailsPanel_Response_Title = 850,
    App_Colors = 851,
    App_CannedResponseCreatorPanel_Title = 852,
    App_CommunicatorMergePanel_Title = 853,
    App_CommunicatorMergePanel_MergeInto = 854,
    App_CommunicatorMergePanel_Merge_Title = 855,
    App_CommunicatorPanel_MarkAsSpammer_Tooltip = 856,
    App_CommunicatorPanel_Merge_Title = 857,
    App_CommunicatorPanel_Merge_Tooltip = 858,
    App_ShowMore = 859,
    App_Back = 860,
    App_ReduceSwitch_Off_Title = 861,
    App_Shortcuts = 862,
    App_UserEditor_Security_Title = 863,
    App_CommunicatorPanel_MarkAsSpammer_Title = 864,
    App_CommunicatorPanel_UnMarkAsSpammer_Title = 865,
    App_DatabagItemPanel_CreateNew_Name_Title = 866,
    App_DatabagItemPanel_CreateNew_Name_Explanation = 867,
    App_DatabagItemPanel_CreateNew_StorageLocation_Title = 868,
    App_DatabagItemPanel_CreateNew_Path_Title = 869,
    App_DatabagItemPanel_CreateNew_Path_Explanation = 870,
    App_DatabagItemPanel_CreateNew_DefaultValue_Title = 871,
    App_DatabagItemPanel_CreateNew_DefaultValue_Explanation = 872,
    App_DatabagItemPanel_Tab_Variables_Title = 873,
    App_DatabagItemPanel_Tab_Calculation_Title = 874,
    App_ObjectRemovePanel_Title = 875,
    App_ObjectRemovePanel_MultipleDependencyWarnings_Title = 876,
    App_ObjectRemovePanel_SingleDependencyWarnings_Title = 877,
    App_TaskInstanceCreatorPanel_Title = 878,
    App_TaskInstanceCreatorPanel_Assign_Title = 879,
    App_TaskInstanceCreatorPanel_Note_Title = 880,
    App_TaskInstanceCreatorPanel_StartDate_Title = 881,
    App_TaskInstanceCreatorPanel_UseOverdue_Title = 882,
    App_TaskInstanceCreatorPanel_UseOverdue_CompleteWithin_Title = 883,
    App_TenantRemovePanel_Title = 884,
    App_TenantRemovePanel_ReadFirst_Title = 885,
    App_TenantRemovePanel_Read_Title = 886,
    App_TenantRemovePanel_Read_AllData_Title = 887,
    App_TenantRemovePanel_Read_Permanent_Title = 888,
    App_TenantRemovePanel_ConfirmationCheck_Title = 889,
    App_TenantRemovePanel_Pending_Title = 890,
    App_TenantRemovePanel_Pending_Explanation = 891,
    App_TenantRemovePanel_Reconsider_Title = 892,
    App_TenantRemovePanel_RemoveButton_Title = 893,
    App_TenantRemovePanel_LogoutRequest_Title = 894,
    App_TenantRemovePanel_Remove_ConfirmationRequired_Title = 895,
    App_TenantRemovePanel_Remove_ConfirmationRequired_Explanation = 896,
    App_UserCreatePanel_Bulk_Explanation = 897,
    App_UserCreatePanel_Bulk_Tip = 898,
    App_UserCreatePanel_Bulk_UserData_Title = 899,
    App_UserCreatePanel_Bulk_Multiple_AddButton_Title = 900,
    App_UserCreatePanel_Bulk_Single_AddButton_Title = 901,
    App_UserCreatePanel_Bulk_TryAdd_NoData_Title = 902,
    App_UserCreatePanel_Bulk_TryAdd_NoData_Explanation = 903,
    App_UserCreatePanel_Bulk_TryAdd_IssuesDetected_Title = 904,
    App_UserCreatePanel_Bulk_TryAdd_Finished_Title = 905,
    App_UserCreatePanel_Bulk_TryAdd_Finished_Explanation = 906,
    App_UserCreatePanel_AddButton_Bulk_Title = 907,
    App_UserCreatePanel_AddButton_Single_Title = 908,
    App_UserOnboardingPanel_Title = 909,
    App_UserOnboardingPanel_Welcome_Title = 910,
    App_UserOnboardingPanel_Welcome_Explanation = 911,
    App_UserOnboardingPanel_Welcome_Onboarding_UserPanel_Title = 912,
    App_UserOnboardingPanel_Setup_Title = 913,
    App_Next = 914,
    App_UserOnboardingPanel_Setup_Explanation = 915,
    App_UserOnboardingPanel_Setup_Empty_Title = 916,
    App_UserOnboardingPanel_Setup_Empty_Container_Title = 917,
    App_UserOnboardingPanel_Setup_Empty_Container_Explanation = 918,
    App_UserOnboardingPanel_Setup_Filled_Title = 919,
    App_UserOnboardingPanel_Setup_Filled_Container_Title = 920,
    App_UserOnboardingPanel_Setup_Filled_Container_Explanation = 921,
    App_UserOnboardingPanel_Exit_Title = 922,
    App_UserOnboardingPanel_AskCommunity_Title = 923,
    App_UserPanel_IsAdmin = 924,
    Online = 925,
    Offline = 926,
    App_UserCreatePanel_Bulk_TryAdd_IssuesDetected_Explanation = 927,
    App_LanguageSelector_Title = 928,
    App_LanguageSelector_nlNl = 929,
    App_LanguageSelector_enUs = 930,
    App_UserPanel_UploadAvatar = 931,
    Flow_NewStep_Name = 932,
    Flow_NewAction_Bot_Message = 933,
    Flow_NewAction_Bot_InternalNote = 934,
    Flow_NewAction_Bot_Question = 935,
    Flow_NewAction_Bot_Choice = 936,
    Flow_NewAction_Bot_KnowledgeBase = 937,
    Flow_NewAction_Logic_Ticket = 938,
    Flow_NewAction_Logic_TicketLabels = 939,
    Flow_NewAction_Logic_TicketTitle = 940,
    Flow_NewAction_Logic_TicketAssignments = 941,
    Flow_NewAction_Navigate_Conditional = 942,
    Flow_NewAction_Navigate_Switch = 943,
    Flow_NewAction_Navigate_Direct = 944,
    Flow_NewAction_DataAdpater_ApiAdapter = 945,
    Flow_NewAction_Task_AddTask = 946,
    Flow_NewAction_Databag_Calculate = 947,
    Flow_NewAction_FlowLogic_Navigate = 948,
    Flow_NewFlow_Name = 949,
    StartConditions = 950,
    SkipConditions = 951,
    Flow_NewStep_First_Name = 952,
    Flow_NewStep_First_Action_Name = 953,
    Flow_NewStep_First_Action_Message = 954,
    Flow_NewAction_Bot_Message_Message = 955,
    Flow_NewAction_Bot_Question_Message = 956,
    Flow_NewAction_Bot_Choice_Message = 957,
    Flow_NewAction_Bot_KnowledgeBase_Message = 958,
    Flow_NewAction_Bot_KnowledgeBase_ValidEcho = 959,
    Flow_NewAction_Bot_KnowledgeBase_NoResults_Message = 960,
    Flow_NewAction_Bot_KnowledgeBase_ReadArticleButtonText = 961,
    Flow_NewAction_Bot_InternalNote_Message = 962,
    Flow_NewAction_Bot_ValidEcho_Random1 = 963,
    Flow_NewAction_Bot_ValidEcho_Random2 = 964,
    Flow_NewAction_Bot_ValidEcho_Random3 = 965,
    Flow_NewAction_Bot_ValidEcho_Random4 = 966,
    Flow_NewAction_Bot_ValidEcho_Random5 = 967,
    Flow_NewAction_Bot_ValidEcho_Random6 = 968,
    Flow_NewAction_Bot_ValidEcho_Random7 = 969,
    Flow_NewAction_Bot_ValidEcho_Random8 = 970,
    Flow_NewAction_Bot_ValidEcho_Random9 = 971,
    Flow_NewAction_Bot_InValidEcho_Random1 = 972,
    Flow_NewAction_Bot_InValidEcho_Random2 = 973,
    Flow_NewAction_Bot_InValidEcho_Random3 = 974,
    Flow_NewAction_Bot_InValidEcho_Random4 = 975,
    Flow_NewAction_Bot_InValidEcho_Random5 = 976,
    Flow_NewAction_Bot_InValidEcho_Random6 = 977,
    Flow_NewAction_Bot_InValidEcho_Random7 = 978,
    Flow_NewAction_Bot_InValidEcho_Random8 = 979,
    Flow_NewAction_Bot_InValidEcho_Random9 = 980,
    Flow_NewAction_Bot_WaitingMessage_First_Message = 981,
    Flow_NewAction_Bot_WaitingMessage_Last_Message = 982,
    App_FlowEditor_NewAction_Bot_Message = 983,
    App_FlowEditor_NewAction_Bot_Question = 984,
    App_FlowEditor_NewAction_Bot_Choice = 985,
    App_FlowEditor_NewAction_Bot_KnowledgeBase = 986,
    App_FlowEditor_NewAction_Bot_InternalNote = 987,
    App_FlowEditor_NewAction_DataAdapter_ApiAdapter = 988,
    App_FlowEditor_NewAction_Ticket_Ticket = 989,
    App_FlowEditor_NewAction_Ticket_Title = 990,
    App_FlowEditor_NewAction_Ticket_Label = 991,
    App_FlowEditor_NewAction_Ticket_Assignments = 992,
    App_FlowEditor_NewAction_Task_AddTask = 993,
    App_FlowEditor_NewAction_Flow_Navigate = 994,
    App_FlowEditor_NewAction_Navigate_Conditional = 995,
    App_FlowEditor_NewAction_Databag_Calculate = 996,
    App_ConditionOperator_Does = 997,
    App_ConditionOperator_DoesNot = 998,
    App_ConditionType_Contains = 999,
    App_ConditionType_Match = 1000,
    App_ConditionType_GreaterThen = 1001,
    App_ConditionType_SmallerThen = 1002,
    App_FlowEditor_OnResponseTimeout = 1003,
    App_UserOnboardingPanel_Language_Title = 1004,
    App_UserOnboardingPanel_Language_Explanation = 1005,
    App_UserOnboardingPanel_User_Title = 1006,
    App_UserOnboardingPanel_User_Explanation = 1007,
    App_UserOnboardingPanel_Theme_Title = 1008,
    App_UserOnboardingPanel_Theme_Explanation = 1009,
    Dashboards_Home_Name = 1010,
    Dashboards_TileTemplate_Messageboard_Title = 1011,
    Dashboards_TileTemplate_PieTasksOpen_Title = 1012,
    Dashboards_TileTemplate_CounterTasksOpen_Title = 1013,
    Dashboards_TileTemplate_CounterTasksCompleted_Title = 1014,
    Dashboards_TileTemplate_CounterTasksOverdue_Title = 1015,
    Dashboards_TileTemplate_CharterTasksOpen_Title = 1016,
    Dashboards_TileTemplate_CharterHeatmapTicketsOpen_Title = 1017,
    Dashboards_TileTemplate_ConditionName_Low_Title = 1018,
    Dashboards_TileTemplate_ConditionName_Normal_Title = 1019,
    Dashboards_TileTemplate_ConditionName_High_Title = 1020,
    Dashboards_TileTemplate_ConditionName_Higher_Title = 1021,
    Dashboards_TileTemplate_ConditionName_Critical_Title = 1022,
    Dashboards_TileTemplate_ChartingTicketUnfinishedVsCompletion_Title = 1023,
    Dashboards_TileTemplate_ChartingTicketUnfinishedVsCompletion_SerieOpen_Title = 1024,
    Dashboards_TileTemplate_ChartingTicketUnfinishedVsCompletion_SerieCompleted_Title = 1025,
    Dashboards_TileTemplate_CounterTicketCompletionTime_Title = 1026,
    Dashboards_TileTemplate_CounterTicketsOpen_Title = 1027,
    Dashboards_TileTemplate_PieTicketLabels_Title = 1028,
    Dashboards_TileTemplateChartingTicketWaitingFor_Title = 1029,
    Dashboards_TileTemplateChartingTicketWaitingFor_Serie_WaitingForInbound_Title = 1030,
    Dashboards_TileTemplateChartingTicketWaitingFor_Serie_WaitingForUser_Title = 1031,
    Dashboards_TileTemplate_PieAdapterExecutionTime_Title = 1032,
    Dashboards_TileTemplate_ChartingAdaptersSuccess_Title = 1033,
    Dashboards_TileTemplate_ChartingAdaptersSuccess_Serie_SuccessTitle = 1034,
    Dashboards_TileTemplate_ChartingAdaptersExecutionTime_Title = 1035,
    Dashboards_TileTemplate_ChartingAdaptersExecutionTime_Serie_Time_Title = 1036,
    Dashboards_TileTemplate_ChartingAdaptersExecutionTime_Serie_Count_Title = 1037,
    Dashboards_TileTemplate_PieTicketCompletedBy_Title = 1038,
    DashboardsNew_Title = 1039,
    DashboardsNew_Custom_Messageboard_Message = 1040,
    DashboardsNew_Custom_Messageboard_Title = 1041,
    App_Home_Night_Title = 1042,
    App_Home_Morning_Title = 1043,
    App_Home_Afternoon_Title = 1044,
    App_Home_Evening_Title = 1045,
    App_DashboardEditor_AddTile_Title = 1046,
    App_DashboardEditor_SetAsHome_Title = 1047,
    App_DashboardEditor_FullScreen_Title = 1048,
    App_ObjectAuthorizationsSelector_Title = 1049,
    App_ObjectAuthorizationsSelector_Revoke_Title = 1050,
    App_DashboardEditor_SharePanel_Title = 1051,
    App_Saved = 1052,
    App_Search_ResultsFor = 1053,
    App_TicketEditor_NothingSelected_HasTickets = 1054,
    App_TicketEditor_NothingSelected_HasNoTickets = 1055,
    App_FlowEditor_ActionDelayBeforeNextMsEditor_Title = 1056,
    App_FlowEditor_InstanceLogs_Title = 1057,
    App_FlowEditor_InstanceLogs_Date = 1058,
    App_FlowEditor_InstanceLogs_DurationMs = 1059,
    App_InstanceLogDetails_Title = 1060,
    App_FlowEditor_ActiveLog_Title = 1061,
    App_FlowEditor_InstanceLogs_Search_Title = 1062,
    App_AvatarSelector_Group_3D_Title = 1063,
    App_AvatarSelector_Group_Flat_Title = 1064,
    App_AvatarSelector_Group_Bot_Title = 1065,
    App_AvatarSelector_Group_Custom_Title = 1066,
    App_AvatarSelector_Group_Default_Title = 1067,
    App_AvatarSelector_Title = 1068,
    App_InDevelopmentMode = 1069,
    App_Edit = 1070,
    Dashboards_TileTemplate_ChartingTicketCompletion_Title = 1071,
    Dashboards_TileTemplate_ChartingTicketMessages_Title = 1072,
    App_UserPanel_Dashboard_Title = 1073,
    App_AvatarSelector_Group_AI_Title = 1074,
    App_Ticket_CommunicationArea_Shortcut_AddTask = 1075,
    App_TicketEditor_MainOption_MarkAsSpammerAndComplete = 1076,
    App_TicketEditor_MainOption_TicketComplete = 1077,
    App_TicketEditor_MainOption_EditTicketName = 1078,
    App_TicketEditor_MainOption_AddTask = 1079,
    App_TicketEditor_Rename_Prompt = 1080,
    App_Confirm_Title = 1081,
    App_Route_NotAllowed_Title = 1082,
    App_Route_NotAllowed_Message = 1083,
    WorkspaceLogs = 1084,
    WorkspaceLog = 1085,
    App_Previous = 1086,
    App_FlowEditor_WaitingAttempt_Suffix = 1087,
    App_FlowEditor_SideBar_Question_Routes_UseAnswer = 1088,
    ConditionGroupLogicalOperator_All = 1089,
    ConditionGroupLogicalOperator_Any = 1090,
    App_UserOnboardingPanel_Theme_Light_Title = 1091,
    App_UserOnboardingPanel_Theme_Light_Explanation = 1092,
    App_UserOnboardingPanel_Theme_Dark_Title = 1093,
    App_UserOnboardingPanel_Theme_Dark_Explanation = 1094,
    App_ActiveStatusEnum_Active = 1095,
    App_ActiveStatusEnum_PartialActive = 1096,
    App_ActiveStatusEnum_InActive = 1097,
    App_View = 1098,
    App_Removed = 1099,
    App_UserEditor_Removed_Explainer = 1100,
    App_ExchangeManifestCreatorPanel_Title = 1101,
    App_ExchangeManifestCreatorPanel_Welcome_Title = 1102,
    App_ExchangeManifestCreatorPanel_Welcome_Explanation = 1103,
    App_ExchangeManifestCreatorPanel_SelectItems_Title = 1104,
    App_ExchangeManifestCreatorPanel_SelectItems_Explanation = 1105,
    App_CollectionsViewer_AddCollection_Title = 1106,
    App_ExchangeManifestCreatorPanel_SelectItems_ItemAlreadyInOutput = 1107,
    Communication_Type_Phone = 1108,
    App_PhoneEditor_AccountSId = 1109,
    App_TelegramEditor_Title = 1110,
    App_PhoneEditor_Token = 1111,
    App_PhoneEditor_Title = 1112,
    App_PhoneEditor_BusyChecking = 1113,
    App_EmailEditor_Title = 1114,
    App_FacebookMessengerEditor_Title = 1115,
    App_Selected = 1116,
    App_PhoneEditor_RecordPhoneCall_Title = 1117,
    App_PhoneNumber = 1118,
    PhoneActionItemType_StartFlow = 1119,
    PhoneActionItemType_TransferCall = 1120,
    PhoneNumber_CheckSMS = 1121,
    App_PhoneNumber_Confirm_Title = 1122,
    App_PhoneNumber_Confirm_Explanation = 1123,
    Flow_NewAction_Special_TransferCall = 1124,
    Flow_NewAction_Special_TransferCall_Message = 1125,
    App_FlowEditor_NewAction_Special_TransferCall = 1126,
    App_FlowEditor_Special_TransferCall_SkipMessage = 1127,
    App_FlowEditor_SideBar_TransferCall_Explanation = 1128,
    App_FlowEditor_SideBar_TransferCall_Random_Title = 1129,
    App_FlowEditor_SideBar_TransferCall_Random_PreferOnline = 1130,
    App_FlowEditor_SideBar_TransferCall_Random_FromTeam_Title = 1131,
    App_FlowEditor_SideBar_TransferCall_Random_FromTeam_Selector_Title = 1132,
    App_FlowEditor_SideBar_TransferCall_Random_FromTeam_Selector_Empty_Title = 1133,
    App_FlowCreatorPanel_Entree_Title = 1134,
    App_FlowCreatorPanel_Trigger_Title = 1135,
    App_FlowCreatorPanel_Trigger_Explanation = 1136,
    App_FlowCreatorPanel_Entree_Explanation = 1137,
    App_FlowCreatorPanel_Trigger_Manual_Title = 1138,
    App_FlowCreatorPanel_Trigger_Manual_Explanation = 1139,
    App_FlowCreatorPanel_Trigger_Auto_Title = 1140,
    App_FlowCreatorPanel_Trigger_Auto_Explanation = 1141,
    App_FlowCreatorPanel_Channels_Title = 1142,
    App_FlowCreatorPanel_Channels_Explanation = 1143,
    App_FlowCreatorPanel_Title = 1144,
    App_FlowCreatorPanel_General_Title = 1145,
    App_FlowCreatorPanel_General_Explanation = 1146,
    GenderEnum_Female = 1147,
    GenderEnum_Male = 1148,
    VoiceLanguageEnum_English = 1149,
    VoiceLanguageEnum_Dutch = 1150,
    App_PhoneEditor_VoiceGender_Title = 1151,
    App_PhoneEditor_VoiceLanguage_Title = 1152,
    App_UserEditor_Gender_Title = 1153,
    App_UserEditor_VoiceLanguage_Title = 1154,
    App_ChannelCreatorPanel_Title = 1155,
    App_ChannelCreatorPanel_Entree_Title = 1156,
    App_ChannelCreatorPanel_Entree_Explanation = 1157,
    App_ChannelCreatorPanel_General_Title = 1158,
    App_ChannelCreatorPanel_General_Explanation = 1159,
    App_ChannelCreatorPanel_CommunicationType_ChatWidget_Title = 1160,
    App_ChannelCreatorPanel_CommunicationType_ChatWidget_Explanation = 1161,
    App_ChannelCreatorPanel_CommunicationType_Telegram_Title = 1162,
    App_ChannelCreatorPanel_CommunicationType_Telegram_Explanation = 1163,
    App_ChannelCreatorPanel_CommunicationType_Realtime_Title = 1164,
    App_ChannelCreatorPanel_CommunicationType_FacebookMessenger_Title = 1165,
    App_ChannelCreatorPanel_CommunicationType_FacebookMessenger_Explanation = 1166,
    App_ChannelCreatorPanel_CommunicationType_Basics_Title = 1167,
    App_ChannelCreatorPanel_CommunicationType_Email_Title = 1168,
    App_ChannelCreatorPanel_CommunicationType_Email_Explanation = 1169,
    App_ChannelCreatorPanel_CommunicationType_Phone_Title = 1170,
    App_ChannelCreatorPanel_CommunicationType_Phone_Explanation = 1171,
    App_ChannelCreatorPanel_Phone_Title = 1172,
    App_ChannelCreatorPanel_Phone_Explanation = 1173,
    App_ChannelCreatorPanel_Phone_TenantOwner_Title = 1174,
    App_CopiedToClipboard = 1175,
    App_PhoneChannel = 1176,
    App_PhoneChannel_Minutes = 1177,
    Credits = 1178,
    App_SubscriptionEditor_PlanName_Title = 1179,
    App_AddCostItemButton_RouterToSubscription_Confirmation = 1180,
    App_TaskDefinitionEditor_Panel_TextArea_MinRows_Title = 1181,
    FormInstance_ValidationMessage_Required_Value_Title = 1182,
    FormInstance_ValidationMessage_Required_ValidValue_Title = 1183,
    App_TaskInstanceEditor_Completed_Title = 1184,
    App_TaskInstanceEditor_EditTaskDefinition_Title = 1185,
    Communicators = 1186,
    CommunicatorCategories = 1187,
    CommunicatorCategory = 1188,
    App_CommunicatorCategoryDefinitionEditor_Form_Title = 1189,
    App_CommunicatorCategoryDefinitionEditor_Form_Explanation = 1190,
    App_CommunicatorCategoryDefinitionEditor_Locked = 1191,
    App_CommunicatorDetails_Editor_ValidationIssue = 1192,
    TaskDefinition_FormField_Type_SmartViewer = 1193,
    Flow_NewAction_Communictor_CommunicatorLogic = 1194,
    App_FlowEditor_NewAction_Communicator_CommunicatorLogic = 1195,
    App_FlowEditor_Communicator_Spam_Title = 1196,
    App_FlowEditor_Communicator_Categories_ResetFirst_Title = 1197,
    App_FlowEditor_Communicator_Categories_Remove_Title = 1198,
    App_FlowEditor_Communicator_Categories_Add_Title = 1199,
    App_FlowEditor_Communicator_Avatar_Change_Title = 1200,
    App_FlowEditor_Communicator_Categories_Change_Title = 1201,
    MetadataComponent_Option_Communicator_Info = 1202,
    App_MetaDataComponentEditor_UseBottomSlot_Title = 1203,
    App_Refresh = 1204,
    MetadataComponent = 1205,
    App_DatabagItemPanel_NoResults_CreateNewFromFilter_Explanation = 1206,
    App_VoiceCenter_Pending_Accept_Title = 1207,
    App_VoiceCenter_Pending_Decline_Title = 1208,
    App_VoiceCenter_Calling_EndCall_Title = 1209,
    App_VoiceCenter_Transfer_Title = 1210,
    App_VoiceCenter_Actions_Ticket_View_Title = 1211,
    App_VoiceCenter_Actions_Ticket_Create_Title = 1212,
    App_VoiceCenter_Actions_StartConnection_Title = 1213,
    App_VoiceCenter_Actions_EndConnection_Title = 1214,
    Voice_Enabled = 1215,
    App_VoiceCenter_Connect_Confirmation_Title = 1216,
    App_VoiceCenter_Calling_LeavingPageWarning_Title = 1217,
    App_VoiceCenter_Ringing_Cancel_Title = 1218,
    App_Use_DontAskAgain = 1219,
    App_VoiceCallStartPanel_AskChannel_Explanation = 1220,
    App_VoiceCallStartPanel_Title = 1221,
    App_CommunicationStartPanel_NoChannels_Explanation = 1222,
    App_CommunicationStartPanel_NoChannels_Create_Title = 1223,
    App_VoiceCenter_Calling_Hold_Off_Title = 1224,
    App_VoiceCenter_Calling_Hold_On_Title = 1225,
    App_FlowEditor_SideBar_TransferCall_Specific_Selector_Empty_Title = 1226,
    Voice_NumberedChoice_Press = 1227,
    Voice_NumberedChoice_Options = 1228,
    App_UserEditor_PhoneAuthorization_Title = 1229,
    App_UserEditor_PhoneAuthorization_Never_Title = 1230,
    App_UserEditor_PhoneAuthorization_OnlyOnVoiceDevice_Title = 1231,
    App_UserEditor_PhoneAuthorization_PhoneWhenNoVoiceDevice_Title = 1232,
    App_UserEditor_PhoneAuthorization_PhoneWhenLoggedOut_Title = 1233,
    App_TeamEditor_PhoneAuthorization_Title = 1234,
    App_TeamEditor_PhoneAuthorization_NeverCall_Title = 1235,
    App_TeamEditor_PhoneAuthorization_PhoneWhenNoUserAvailable_Title = 1236,
    App_TeamEditor_PhoneAuthorization_OnlyOnPhoneNumber_Title = 1237,
    App_TeamEditor_PhoneAuthorization_OnlyToTeamUser_Title = 1238,
    Dashboards_TileTemplate_CounterPhoneCalls_Queued_Total_Title = 1239,
    Dashboard_Tile_Type_PhoneChannel_Queued_Total = 1240,
    Dashboard_Tile_Type_PhoneChannel_Queued_PerChannel = 1241,
    Dashboards_TileTemplate_CounterPhoneCalls_Queued_PerChannel_Title = 1242,
    App_PhoneEditor_OpeningHours_Title = 1243,
    App_PhoneEditor_OpeningHours_Use = 1244,
    App_PhoneEditor_Lobby_Title = 1245,
    App_PhoneEditor_Lobby_OutsideOpeningHours_Title = 1246,
    App_Ticket_CommunicationArea_Notifications_NoReceipients_Title = 1247,
    App_Ticket_CommunicationArea_Notifications_NoReceipients_Body = 1248,
    App_CommunicatorDetails_PhoneCalls_Title = 1249,
    App_VoiceCenter_Actions_Ticket_Link_Title = 1250,
    App_TicketEditor_PhoneCall_NoRecording_Title = 1251,
    App_Home_Title = 1252,
    App_PhoneEditor_MessageAfterAction_Title = 1253,
    App_ChannelCreatorPanel_CommunicationType_Phone_Item_Explanation = 1254,
    App_FlowEditor_SideBar_Question_Title = 1255,
    App_FlowEditor_SideBar_Question_Validation_Title = 1256,
    App_FlowEditor_SideBar_Question_Validation_RegexValidation_Title = 1257,
    App_FlowEditor_SideBar_Question_Validation_RegexExtraction_Title = 1258,
    App_FlowEditor_SideBar_Question_Validation_NormalizationRules_Title = 1259,
    App_DataAdapterEditor_Execution_LogMethod_Title = 1260,
    Workspaces = 1261,
}

export enum LanguageType {
    EnUs = 0,
    NL = 1,
}

export interface LineChartData {
    chartingType?: ChartingTypeEnum;
    chartingSize?: ChartingSizeEnum;
    readonly min?: number | null;
    readonly max?: number | null;
    dataType?: TickStatDataTypeEnum;
    chartData?: ChartValueDataItem[];
    lineOptions?: LineOptionsData[];
    title?: string;
    color?: ColorsEnum;
    updateToUtc?: Date | null;
}

export interface LineOptionsData {
    color?: ColorsEnum;
    valueKey?: string;
    nameKey?: string;
}

export interface LinkPhoneCallToTicketRequest {
    callId?: string;
    ticketId?: string;
}

export interface LogData {
    logType?: FlowLogType;
    flowDefinitionId?: string;
    actionId?: string | null;
    stepId?: string | null;
    message?: string;
    creationDate?: Date;
}

export interface LogOutRequest {
    deviceId: string;
    forceLogOffAllDevices: boolean;
}

export enum LogSeverity {
    None = 0,
    Always = 1,
    Failures = 2,
}

export enum LogTypeEnum {
    Removal = 0,
    Warning = 1,
    Update = 2,
}

export interface LoginRequest {
    tenantId: string;
    username: string;
    password: string;
    deviceId: string;
    deviceName: string;
}

export interface MarkSpammerRequest {
    communicatorId: string;
    isSpammer?: boolean;
}

export enum MentionTargetEnum {
    Ticket = 0,
    Flow = 1,
    TaskInstance = 2,
}

export enum MentionToEnum {
    Team = 1,
    User = 2,
}

export interface MergeCommunicatorsRequest {
    communicatorId: string;
    masterCommunicatorId: string;
}

export enum MessageStatus {
    Processing = 0,
    Send = 1,
    Read = 2,
    Error = 3,
}

export interface MessageboardTileSettings {
    color?: ColorsEnum;
    title?: string | null;
    messageMarkdown?: string | null;
}

export interface MetaDataComponentAdapterSourceSettings {
    presentationType?: AdapterComponentPresentationTypeEnum;
    dataAdapterId?: string | null;
    extractionStrategy: ExtractionStrategyEnum;
    extractionStrategySettings: string;
    dataStoragePath: string;
    viewerSettings?: MetaDataComponentAdapterSourceViewerSettings;
}

export interface MetaDataComponentAdapterSourceViewerSettings {
    presentationType?: AdapterComponentPresentationTypeEnum;
}

export interface MetaDataComponentCommunicatorHistoryData {
    items?: CommunicatorHistoryDataItem[];
}

export interface MetaDataComponentCommunicatorInfoData {
    communicatorSummary?: TickCommunicatorSummary;
    form?: FormData;
    formValidationResponse?: FormValidationResponse;
}

export interface MetaDataComponentDeletion {
    ticketId: string;
    ticketMetaDataComponentIds: string[];
}

export interface MetaDataComponentTickSourceCommunicatorInfoSettings {
    form?: FormDefinitionSettings;
}

export interface MetaDataComponentTickSourceSettings {
    settingsJson?: string | null;
    type?: TickComponentPresentationTypeEnum;
    viewerSettings?: MetaDataComponentTickSourceViewerSettings;
}

export interface MetaDataComponentTickSourceViewerSettings {
    settingsJson?: string | null;
    type?: TickComponentPresentationTypeEnum;
}

export interface MetaDataComponentUpdate {
    ticketMetaDataComponentId: string;
    ticketId: string;
    lastUpdateDate: Date;
    lastUpdateDateTicks: number;
    isFinalDataRetrievalAttempt: boolean;
    dataRetrievalSuccess: boolean;
    debugMessages?: string[];
    ready?: boolean;
    componentName?: string | null;
    componentData?: string | null;
    weight?: number;
    useBottomSlot?: boolean;
    sourceType?: ComponentDataSourceTypeEnum;
    viewerSettingsJson?: string;
    metaDataComponentDefinitionId?: string;
}

export interface MetaDataItem {
    id: string;
    name: string;
}

export interface MetaInfoDataUrl {
    title: string;
    url: string;
}

export interface MoveActionRequest {
    flowVersionId: string;
    stepId: string;
    targetStepId: string;
    actionId: string;
    index: number;
}

export interface MoveActionResponse {
    flowVersionId: string;
    affectedSteps: MoveAffectedStep[];
}

export interface MoveAffectedStep {
    stepId: string;
    actionIndexes: ActionIndex[];
}

export interface MoveCollectionRequest {
    collectionId: string;
    newParentId?: string | null;
}

export interface MoveObjectToCollectionRequest {
    workspaceId: string;
    objectType: CollectionObjectTypeEnum;
    versionGroupId: string;
    newCollectionId?: string | null;
}

export interface MyUserContext {
    userId: string;
    tenantId: string;
    admin: boolean;
    isFirstLogin: boolean;
    allowUpsell: boolean;
    isActivePartner: boolean;
    workspaces: TickWorkspace[];
    subscriptionPlanData?: TenantSubscriptionPlanData;
    docuBlocks: TickDocuBlock[];
    homeDashboardId?: string | null;
    settingsJson?: string | null;
    localeCode?: string | null;
    allowedDevelopmentFeatures: DevelopmentFeature[];
}

export interface NavToSubflowSettings {
    targetFlowDefinitionId?: string | null;
}

export enum NavigateActionTypeEnum {
    Conditional = 2,
}

export interface NextStepLogicConditionalNavigateData {
    navigateConditions: FlowConditionData[];
}

export interface NormalizationRule {
    id?: string;
    find?: string | null;
    replace?: string | null;
}

export interface NotificationSettingsData {
    items?: NotificationSettingsItem[];
}

export interface NotificationSettingsItem {
    type?: SlaNotificationTypeEnum;
    userIds?: string[];
    teamIds?: string[];
}

export enum NotificationType {
    Normal = 0,
    Error = 1,
    Subscription = 2,
}

export enum NotificationTypeEnum {
    Message = 0,
    Mention = 1,
}

export interface ObjectDependency {
    id?: string;
    required?: boolean;
    objectId?: string;
    objectType?: ObjectTypeEnum;
    dependentObjectId?: string | null;
    dependentObjectVersionId?: string | null;
    message?: string;
    dependentObjectType?: ObjectTypeEnum;
}

export interface ObjectRemovalProgress {
    removalStatus: RemovalStatus;
    messages: ObjectDependency[];
    objectId: string;
}

export enum ObjectTypeEnum {
    Flow = 0,
    Adapter = 1,
    MetaDataComponent = 2,
    WorkspaceFile = 3,
    Task = 4,
    KnowledgeBase = 5,
}

export interface ObjectVersion {
    id: string;
    created: Date;
    executionEnvironmentId: string;
}

export enum OpenerTypeEnum {
    Square = 0,
    Landscape = 1,
}

export interface OpeningHoursData {
    useOpeningHours?: boolean;
    monday?: OpeningHoursItem;
    tuesday?: OpeningHoursItem;
    wednesday?: OpeningHoursItem;
    thursday?: OpeningHoursItem;
    friday?: OpeningHoursItem;
    saturday?: OpeningHoursItem;
    sunday?: OpeningHoursItem;
}

export interface OpeningHoursItem {
    allDay?: boolean;
    fromUtcHours?: number | null;
    fromUtcMinutes?: number | null;
    toUtcHours?: number | null;
    toUtcMinutes?: number | null;
}

export interface OptionsItemData {
    id: string;
    text: string;
    data: string;
}

export enum OptionsSourceEnum {
    Options = 0,
    Databag = 1,
}

export interface ParsedCannedResponse {
    message?: string;
    attachmentLinks?: FileLink[];
}

export enum ParticipantsTypeEnum {
    Communicator = 0,
    User = 1,
    Team = 2,
}

export interface PaymentProgressResponse {
    paymentProviderLink?: string;
}

export enum Period {
    Minute = 1,
    FiveMinutes = 2,
    Hour = 3,
    Day = 4,
    Week = 5,
    Month = 6,
    Year = 7,
}

export enum PeriodicTileShowPeriodEnum {
    Custom = 0,
    LastKnown = 1,
    Last60Min = 2,
    Last24Hours = 3,
    Last30Days = 4,
    Last365Days = 5,
}

export interface PhoneActionItemData {
    id?: string;
    text?: string;
    data?: string;
    actionType?: PhoneActionItemType;
}

export enum PhoneActionItemType {
    StartFlow = 0,
    TransferCall = 1,
}

export interface PhoneActionTransferCallItemData {
    userId?: string | null;
    teamId?: string | null;
}

export enum PhoneChannelAccountHolderType {
    Tick = 0,
    Tenant = 1,
}

export enum PhoneChannelCallStatus {
    InProgress = 0,
    Ended = 1,
    OnHold = 2,
}

export interface PhoneChannelSettings {
    accountSId?: string | null;
    token?: string | null;
    accountHolder: PhoneChannelAccountHolderType;
    voiceGender?: GenderEnum;
    voiceLanguage?: VoiceLanguageEnum;
    recordPhoneCall?: boolean;
    phoneNumber?: PhoneNumberData;
    lobby?: PhoneLobbySettingsData;
    lobby_OutsideOpeningHours?: PhoneLobbySettingsData;
    apiKey?: string | null;
    apiSecret?: string | null;
    openingHours?: OpeningHoursData;
}

export interface PhoneLobbySettingsData {
    message?: string | null;
    actions?: PhoneActionItemData[];
    messageAfterChoice?: string | null;
}

export interface PhoneNumberData {
    sId?: string;
    phoneNumber?: string;
}

export interface PieChartData {
    dataType?: TickStatDataTypeEnum;
    chartingType?: ChartingTypeEnum;
    chartingSize?: ChartingSizeEnum;
    centerTitle?: string | null;
    centerSubTitle?: string | null;
    updateToUtc?: Date | null;
    chartData?: PieChartDataItem[];
    readonly min?: number | null;
    readonly max?: number | null;
}

export interface PieChartDataItem {
    tooltip: string;
    value: number;
    name: string;
    color?: ColorsEnum;
}

export interface PreRegisterRequest {
    emailAddress: string;
    tenantName: string;
    newPassword: string;
    newUsername: string;
    planId?: string | null;
    partnerShipId?: string | null;
}

export interface PreRegisterResponse {
    success?: boolean;
    tenantUrlName?: string;
    message?: string;
}

export interface ProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    [key: string]: any;
}

export interface RangeAppearanceCondition {
    id?: string;
    fromValue?: number | null;
    toValue?: number | null;
    color?: ColorsEnum;
    name?: string | null;
}

export interface RegisterRequest {
    validationCode: string;
}

export interface RegisterResponse {
    taskId: string;
    message: string;
    success: boolean;
}

export enum RemovalStatus {
    Failed = 0,
    SoftFinished = 1,
    HardFinished = 2,
}

export interface RemoveTenantProgress {
    tenantRemovalRequested?: boolean;
}

export enum ReplyOptionType {
    ChoiceOption = 0,
    SummarizedItemOption = 1,
}

export interface ReplyOptionsData {
    type?: ReplyOptionType;
    data?: string;
}

export interface RequestUserPasswordResetRequest {
    userName: string;
    tenantId: string;
}

export interface ResetPasswordResponse {
    success?: boolean;
    message?: string;
}

export interface ResetUserPasswordRequest {
    tenantId: string;
    newPassword: string;
    validationCode: string;
}

export interface ResolveActionCommentsRequest {
    flowVersionId: string;
    stepId: string;
    actionId: string;
}

export interface ResolveFlowCommentsRequest {
    flowVersionId: string;
}

export interface ResolveStepCommentsRequest {
    flowVersionId: string;
    stepId: string;
}

export interface RestoreFlowDefinitionRequest {
    flowVersionId: string;
    flowDefinitionId: string;
}

export interface ResultAction {
    id?: string;
    resultActionType?: ResultActionType;
    settingsJson?: string | null;
}

export enum ResultActionType {
    StoreInDatabag = 0,
}

export interface ResultActions {
    actionsSettings?: ResultAction[];
}

export interface SLATicketMessageSettings {
    maxOutboundMessagesCount: number;
}

export interface SLATicketResponseTimeSettings {
    duePeriod: SlaPeriod;
    maxPeriodCount: number;
    useCountdownBeforeDue: boolean;
    countdownBeforeDuePeriod: SlaPeriod;
    countdownBeforeDuePeriodCount: number;
}

export interface SearchCommunicatorAddressRequest {
    workspaceId: string;
    query: string;
    communicationChannelId?: string | null;
    communicationTypes?: CommunicationType[];
}

export interface SearchCommunicatorItem {
    ticketSummaries?: TicketSummary[] | null;
    communicator?: TickCommunicator;
}

export interface SearchExchangeItemsRequest {
}

export interface SearchExchangeItemsResponse {
    totalCount: number;
    skip?: number;
    take?: number;
    items?: TickExchangeItemSummary[];
}

export interface SearchFlowInstancesRequest {
    workspaceId: string;
    query?: string;
}

export interface SearchKnowledgeBase {
    name?: string | null;
    articles?: SearchKnowledgeBaseArticleItem[] | null;
}

export interface SearchKnowledgeBaseArticleItem {
    id?: string;
    name?: string | null;
    summaryHtml?: string | null;
}

export interface SearchResponse {
    items?: SearchResultItem[];
    resultsCount?: number;
}

export interface SearchResultItem {
    type?: SearchResultTypeEnum;
    name?: string;
    id?: string;
    dataJson?: string;
}

export enum SearchResultTypeEnum {
    Ticket = 0,
    CommunicatorTickets = 1,
    KnowledgebaseArticles = 2,
    Custom = 3,
}

export interface SendRequest {
    messageId: string;
    messageMarkDown?: string | null;
    to: string;
    from: string;
    chatWidgetId: string;
    actionId?: string | null;
    metaDataJson?: string | null;
}

export interface SenderInfoData {
    name: string;
    avatarUrl?: string | null;
    senderId: string;
}

export interface SetFlowActiveStatusRequest {
    flowVersionId: string;
    active?: boolean;
}

export interface SetFlowActiveStatusResponse {
    flowVersionId: string;
    active: boolean;
}

export interface SetIsTypingRequest {
    ticketId: string;
    isTyping: boolean;
    receivers: AddMessageRequestReceiver[];
}

export interface SetTaskAssignmentsRequest {
    taskInstanceId: string;
    userIds: string[];
    teamIds: string[];
}

export interface SetTicketAssignmentsRequest {
    ticketId: string;
    workspaceId: string;
    userIds: string[];
    teamIds: string[];
}

export interface SetTicketLabelsRequest {
    ticketId: string;
    workspaceId: string;
    labelDefinitionIds: string[];
}

export interface SetupWorkspaceRequest {
    workspaceId: string;
    createItems: boolean;
}

export interface ShowPeriodCustomDateRangeSettings {
    showPeriodCustomDateRange?: ShowPeriodCustomDateRangeTypeEnum;
    showPeriodicPeriod?: Period;
    showPeriodicPeriodCount?: number | null;
    fixedFromTicks?: number | null;
    fixedToTicks?: number | null;
}

export enum ShowPeriodCustomDateRangeTypeEnum {
    Periodic = 0,
    Fixed = 1,
}

export enum SlaNotificationTypeEnum {
    Notification = 0,
    Email = 1,
}

export enum SlaPeriod {
    Second = 0,
    Minute = 1,
    Hour = 2,
    Day = 3,
}

export interface SlaResult {
    id?: string;
    slaDefinitionId?: string;
    relatedMessageId?: string | null;
    success?: boolean;
}

export interface SlaTimer {
    slaDefinitionId?: string;
    dueDate?: Date;
    startCountDownDate?: Date;
    dueDateTicks?: number;
    countDownStartDate?: Date;
    countDownStartDateTicks?: number;
    slaInstanceId?: string;
}

export enum SlaType {
    ResponseTime = 0,
    OutboundMessageCount = 1,
}

export enum SpecialActionTypeEnum {
    TransferCall = 1,
}

export interface SpecialTransferCallOption {
    id: string;
    index: number;
    condition: ConditionGroup;
    transferToUserId?: string | null;
    transferToTeamId?: string | null;
}

export interface SpecialTransferCallSettings {
    message?: string | null;
    failTargetStepId?: string | null;
    transferCallOptions?: SpecialTransferCallOption[] | null;
}

export interface StartTicketFlowRequest {
    ticketId: string;
    flowDefinitionId: string;
}

export interface StartVoiceRequest {
    deviceId?: string;
}

export interface StartVoiceResponse {
    token?: string;
}

export enum StorageLocation {
    Tick = 0,
    Memory = 1,
    Flow = 2,
    Contact = 3,
    Ticket = 4,
    Workspace = 5,
    Vault = 6,
    Environment = 7,
    TaskInstance = 8,
}

export interface StringStringIEnumerableKeyValuePair {
    key?: string;
    value?: string[];
}

export interface SubscribeToFlowEditorRequest {
    flowVersionId: string;
    active: boolean;
}

export interface SubscribeToTicketRequest {
    ticketId?: string;
    active?: boolean;
}

export enum SubscriptionActivationStatus {
    NeedsPaymentProviderVerification = 0,
    Success = 1,
}

export enum SubscriptionCostItemType {
    MaxFileSize = 0,
    Labels = 1,
    Seats = 2,
    FlowsAction = 3,
    DataRetentionDays_Default = 4,
    Datawarehousing = 5,
    BaseCost = 6,
    CustomDashboard = 7,
    Knowledgebase = 8,
    TaskDefinition = 9,
    Teams = 10,
    Sla = 11,
    DataAdapter = 12,
    DatabagItem = 13,
    Flow = 14,
    EventSubscription = 15,
    ExecutionEnvironment = 16,
    Channel = 17,
    User = 18,
    InternetDomain = 19,
    MetaDataComponent = 20,
    CannedResponse = 21,
    CompletedTickets = 22,
    PhoneChannelBaseCost = 23,
    PhoneChannelCallMinutes = 24,
    WorkspaceFiles = 25,
    CommunicatorCategories = 26,
    Workspaces = 27,
}

export interface SubscriptionProgressResponse {
    status: SubscriptionActivationStatus;
    paymentProviderLink?: string | null;
}

export interface SubscriptionUsage {
    id?: string;
    subscriptionId?: string;
    from?: Date;
    to?: Date;
    costPerUsage?: number;
    calculatedCostWithDiscount?: number;
    calculatedCostWithoutDiscount?: number;
    calculatedDiscount?: number;
    vatPercentage?: number;
    calculatedVAT?: number;
    calculatedCostIncludingVAT?: number;
    itemType?: SubscriptionCostItemType;
    itemUsageValue?: number;
    itemCreditUsageValue?: number;
    description?: string;
}

export interface SummarizedItemOptionData {
    value?: string | null;
    buttonText?: string | null;
    name?: string | null;
    summaryHtml?: string | null;
}

export interface TaskAction {
    id?: string;
    name?: string;
    targetStatus?: TaskInstanceStatus;
}

export interface TaskDefinitionAction {
    id?: string;
    name?: string;
    targetStatus?: TaskInstanceStatus;
    saveToState?: boolean;
    data?: string | null;
    storageLocation?: FormDatabagItemPointer;
    storagePath?: string | null;
}

export enum TaskDefinitionPeriod {
    Minute = 0,
    Hour = 1,
    Day = 2,
}

export interface TaskDefinitionSettings {
    form?: FormDefinitionSettings;
    actions?: TaskDefinitionAction[];
}

export interface TaskFilterOptions {
    filterCreationFromDate?: Date | null;
    assignedTo?: AssignmentFilterEnum;
    customAssignedToUserIds?: string[] | null;
    customAssignedToTeamIds?: string[] | null;
    status?: TaskFilterTaskStatusEnum;
}

export enum TaskFilterTaskStatusEnum {
    All = 0,
    Open = 1,
    Completed = 2,
}

export enum TaskInstanceStatus {
    Todo = 0,
    InProgress = 1,
    Finished = 2,
    Failed = 3,
}

export interface TaskOverdueSettings {
    useOverdue: boolean;
    period: TaskDefinitionPeriod;
    periodCount: number;
}

export interface TaskStartSettings {
    delayStart: boolean;
    period: TaskDefinitionPeriod;
    periodCount: number;
}

export enum TaskTypeEnum {
    AddTask = 0,
}

export enum TeamPhoneAuthorizationEnum {
    NeverCall = 0,
    PhoneWhenNoUserAvailable = 1,
    OnlyOnPhoneNumber = 2,
    OnlyToTeamUser = 3,
}

export interface TeamSummary {
    id: string;
    name: string;
    color?: ColorsEnum;
    handle?: string;
    deleted?: boolean;
    voiceAvailable?: boolean;
}

export interface TelegramChannelSettings {
    token: string;
}

export interface TemplateCustomAttribute {
    key?: string;
    value?: string;
}

export interface TemplateHeaderItem {
    key?: string;
    value?: string;
    id?: string;
}

export enum TenantInternetDomainStatusEnum {
    Validating = 0,
    Verified = 1,
    Rejected = 2,
}

export enum TenantInvoiceStatus {
    ReadyForAutoCollection = 0,
    ReadyForManualCollection = 1,
    Paid = 2,
    Pending = 3,
}

export interface TenantOverview {
    id: string;
    name: string;
    urlName: string;
    subscriptionName?: string | null;
    ispaying?: boolean | null;
    defaultEmailAddress?: string;
    userCount?: number;
    creationDate?: Date;
    flowCount?: number;
    invoices?: TickInvoice[];
    users?: TenantUserSummary[];
}

export interface TenantOverviewSummary {
    id: string;
    name: string;
    urlName: string;
    subscriptionName?: string | null;
    ispaying?: boolean | null;
}

export interface TenantSubscriptionBillingPlanData {
    numerics?: TenantSubscriptionPlanBillingNumericItem[];
}

export interface TenantSubscriptionPlanBillingNumericItem {
    name?: string | null;
    description?: string | null;
    type?: SubscriptionCostItemType;
    calculationPeriod?: BillingCalculationPeriod;
    cost?: number;
}

export interface TenantSubscriptionPlanBooleanItem {
    type?: SubscriptionCostItemType;
    value?: boolean;
}

export interface TenantSubscriptionPlanCreditItem {
    type?: SubscriptionCostItemType;
    value?: number;
}

export interface TenantSubscriptionPlanData {
    numerics?: TenantSubscriptionPlanNumericItem[];
    toggles?: TenantSubscriptionPlanBooleanItem[];
    credits?: TenantSubscriptionPlanCreditItem[];
    validation?: ValidationData;
}

export interface TenantSubscriptionPlanNumericItem {
    type: SubscriptionCostItemType;
    value: number;
}

export interface TenantUpdate {
    utilityDelta?: TickWorkspaceUtilityData;
}

export interface TenantUserSummary {
    id: string;
    name: string;
    handle: string;
    voiceAvailable?: boolean;
    userType: UserTypeEnum;
    phoneAuthorization?: UserPhoneAuthorizationEnum;
    loggedIn: boolean;
    avatarFileId?: string | null;
    deleted?: boolean;
    isAdmin?: boolean;
    emailAddress?: string | null;
    color?: ColorsEnum;
    avatarUrl?: string | null;
}

export interface TickAddShopifyIntegrationData {
    shopifyDomain?: string | null;
}

export interface TickApiAdapterDefinition {
    name: string;
    trigger: AdapterTrigger;
    executionSettings: ApiAdapterExecutionSettings;
    resultActionsSettings: ResultActions;
    logSetting: LogSeverity;
    id: string;
    workspaceId: string;
    creationDate: Date;
    objectCollectionId: string;
    deleted: boolean;
    executionEnvironmentId: string;
    sampleData: string;
}

export interface TickApiAdapterLog {
    id: string;
    creationDate: Date;
    adapterDefinitionId: string;
    adapterInstanceId: string;
    executionMs: number;
    success: boolean;
    responseCode?: number | null;
    requestDataJson?: string | null;
    responseDataJson?: string | null;
    message?: string | null;
}

export interface TickApiAdapterLogSummary {
    id: string;
    creationDate: Date;
    adapterDefinitionId: string;
    adapterInstanceId: string;
    executionMs: number;
    success: boolean;
    responseCode?: number | null;
}

export interface TickAppNotification {
    message?: string;
    title?: string;
    type?: NotificationType;
}

export interface TickBillingInfo {
    hasMandate?: boolean;
}

export interface TickCallSummary {
    callId?: string;
    ticketSummary?: TicketSummary;
    participants?: TickPhoneCallParticipant[] | null;
}

export interface TickCannedResponseDefinition {
    id: string;
    name: string;
    message?: string;
    attachmentWorkspaceFileIds?: string[] | null;
}

export interface TickCannedResponseSummary {
    id: string;
    name: string;
}

export interface TickChannel {
    id: string;
    name: string;
    communicationType: CommunicationType;
    enableInboundMessages: boolean;
    enableOutboundMessages: boolean;
    externalId: string;
    workspaceId: string;
    lockedSettings: boolean;
    settingsJson: string;
    addresses: TickChannelAddress[];
    generalSettings: GeneralChannelSettings;
}

export interface TickChannelAddress {
    id?: string;
    communicationType: CommunicationType;
    creationDate: Date;
    address?: string;
    routingToType: ChannelRoutingTypeEnum;
    routingToObjectId?: string | null;
    useForRouting: boolean;
    communicationChannelId: string;
}

export interface TickChannelSummary {
    id: string;
    name: string;
    communicationType: CommunicationType;
    enableInboundMessages: boolean;
    enableOutboundMessages: boolean;
    externalId: string;
}

export interface TickCommunicator {
    id: string;
    name: string;
    markedAsSpammer: boolean;
    color: ColorsEnum;
    avatarFileId?: string | null;
    addresses: CommunicatorAddress[];
}

export interface TickCommunicatorCategoryDefinition {
    id: string;
    name: string;
    weight?: number;
    workspaceId?: string;
    settings?: CommunicatorCategoryDefinitionSettings;
}

export interface TickCommunicatorCategoryDefinitionSummary {
    id: string;
    name: string;
    weight?: number;
}

export interface TickCommunicatorSummary {
    id: string;
    name: string;
    color: ColorsEnum;
    avatarFileId?: string | null;
}

export interface TickCommunicatorWorkingData {
    id: string;
    name: string;
    markedAsSpammer: boolean;
    color: ColorsEnum;
    avatarFileId?: string | null;
    addresses: CommunicatorAddress[];
    summary?: TickCommunicatorSummary;
    workingDatas?: CommunicatorCategoryWorkingData[];
    categoryDefinitionIds?: string[];
    lastTickets?: TicketSummary[];
    lastCalls?: TickPhoneCallSummary[];
}

export enum TickComponentPresentationTypeEnum {
    CommunicatorHistory = 1,
    CommunicatorInfo = 2,
}

export interface TickCreateTaskInstanceRequest {
    taskDefinitionId?: string | null;
    workspaceId: string;
    communicatorId?: string | null;
    forContextTicketId?: string | null;
    note?: string;
    startDate?: Date | null;
    overdueSettings?: TaskOverdueSettings;
    assignedUserIds?: string[] | null;
    assignedTeamIds?: string[] | null;
}

export interface TickDashboard {
    id: string;
    deleted?: boolean;
    name: string;
    settings?: DashboardSettings;
    workspaceId?: string;
    authorizationType?: AuthorizationType;
}

export interface TickDashboardSummary {
    id: string;
    name: string;
}

export interface TickDataBag {
    id: string;
    storage: StorageLocation;
    storageName: string;
    items: TickDatabagItem[];
}

export interface TickDataBagSummary {
    id: string;
    storage: StorageLocation;
    storageName: string;
}

export interface TickDatabagItem {
    path?: string;
    data?: string;
    dataType?: DataItemDataType;
}

export interface TickDatabagItemDefinition {
    id: string;
    name: string;
    token?: string;
    storageLocation?: StorageLocation;
    fullPath?: string;
    dataType?: DataItemDataType;
    searchable?: boolean;
    providedByTick?: boolean;
    databagValue?: string | null;
    defaultValue?: string | null;
}

export interface TickDocuBlock {
    id?: string;
    group?: DocumentationGroup;
    creationDate?: Date;
    weight?: number;
    title?: string;
    buttonText?: string;
    description?: string;
    url?: string;
    highlight?: boolean;
}

export interface TickEndPartnershipRequest {
    partnerShipId: string;
}

export interface TickEndPartnershipResponse {
    success?: boolean;
    message?: string;
}

export interface TickEndTenantSubscriptionRequest {
    tenantId: string;
    workspaceId: string;
}

export interface TickEndTenantSubscriptionResponse {
    success?: boolean;
    message?: string;
}

export interface TickEventSubscription {
    id: string;
    name: string;
    active?: boolean;
    externalId?: string | null;
    objectType?: EventObjectType;
    eventType?: EventType;
    objectId?: string | null;
    apiUrl?: string;
    retryOnFailure?: boolean;
    useAuthHeader?: boolean;
    authHeader?: TemplateHeaderItem;
    headers?: TemplateHeaderItem[];
    usedAdapterId?: string;
}

export interface TickEventSubscriptionSummary {
    id: string;
    name: string;
    active?: boolean;
}

export interface TickExchangeItemSummary {
    id: string;
    name: string;
    description?: string;
}

export interface TickExecutionEnvironment {
    id: string;
    name: string;
    /** Only settable by calling setAsProduction */
    isProduction: boolean;
    /** Only settable by calling setAsProduction */
    isDefaultForCreation: boolean;
    dataBagId: string;
}

export interface TickExecutionEnvironmentSummary {
    id: string;
    name: string;
}

export interface TickFlowDefinition {
    id: string;
    versionId: string;
    isDeleted: boolean;
    name: string;
    trigger: FlowTriggerEnum;
    startStepId?: string | null;
    settingsNodePosition: UIPositionData;
    startConditionsJson?: string | null;
    skipConditionsJson?: string | null;
    startOnCommunicationChannelIds?: string[] | null;
    defaultBotUserId?: string | null;
    executionEnvironmentId: string;
    developmentData?: TickFlowTestingData;
    active: boolean;
    steps?: FlowStep[] | null;
    comments?: FlowComment[];
}

export interface TickFlowDefinitionMetaData {
    id: string;
    versionId: string;
    isDeleted: boolean;
    name: string;
    trigger: FlowTriggerEnum;
    startStepId?: string | null;
    settingsNodePosition: UIPositionData;
    startConditionsJson?: string | null;
    skipConditionsJson?: string | null;
    startOnCommunicationChannelIds?: string[] | null;
    defaultBotUserId?: string | null;
    executionEnvironmentId: string;
    developmentData?: TickFlowTestingData;
    active: boolean;
}

export interface TickFlowDefinitionSummary {
    id: string;
    name: string;
    active?: boolean;
    activeInExecutionEnvironmentIds?: string[];
}

export interface TickFlowInstanceLog {
    id: string;
    flowDefinitionId: string;
    flowDefinitionVersionId: string;
    creationDate?: Date;
    executionMs?: number;
    finished?: boolean;
    flowLog?: LogData[];
    ticketId?: string;
    travelData?: TickFlowInstanceTravelingData;
}

export interface TickFlowInstanceLogSummary {
    id: string;
    flowDefinitionId: string;
    flowDefinitionVersionId: string;
    creationDate?: Date;
    executionMs?: number;
    finished?: boolean;
}

export interface TickFlowInstanceTravelingData {
    breadCrumbs?: TickFlowInstanceTravelingDataItem[];
}

export interface TickFlowInstanceTravelingDataItem {
    sourceStepId?: string | null;
    sourceActionId?: string | null;
    sourceActionOptionId?: string | null;
    targetStepId?: string | null;
    targetActionId?: string | null;
}

export interface TickFlowTestingData {
    qualifierText?: string | null;
}

export interface TickHttpRequestMessage {
    url?: string | null;
    headers?: ApiHeaderItem[];
    method?: string;
    body?: string | null;
}

export interface TickInternetDomain {
    id?: string;
    creationDate?: Date;
    domainName?: string;
    lastCheckDate?: Date | null;
    verifiedDate?: Date | null;
    emailReceipient?: string;
    status?: TenantInternetDomainStatusEnum;
    publicVerificationCode?: string;
    installationMessage?: string;
}

export interface TickInvoice {
    id?: string;
    creationDate?: Date;
    currency?: CurrencyType;
    totalCostWithoutDiscount?: number;
    totalCostIncludingVAT?: number;
    totalDiscount?: number;
    description?: string;
    status?: TenantInvoiceStatus;
    dueDate?: Date;
}

export interface TickKnowledgeBase {
    id: string;
    name?: string;
    description?: string;
    type?: KnowledgeBaseTypeEnum;
    deleted?: boolean;
}

export interface TickKnowledgeBaseArticle {
    id: string;
    name: string;
    published: boolean;
    articleMarkdown: string;
    articleSummaryMarkDown: string;
    tags: string[];
}

export interface TickKnowledgeBaseArticleSummary {
    id: string;
    name: string;
    published: boolean;
}

export interface TickKnowledgeBaseSummary {
    id: string;
    name: string;
    type: KnowledgeBaseTypeEnum;
}

export interface TickLabelDefinition {
    id: string;
    name: string;
    color: ColorsEnum;
    deleted: boolean;
}

export interface TickManagerTeamData {
    id: string;
    name: string;
    color: ColorsEnum;
    handle: string;
    memberUserIds?: string[];
    phoneNumber?: string | null;
    phoneAuthorization?: TeamPhoneAuthorizationEnum;
}

export interface TickManagerUserData {
    workspaceId: string;
    id: string;
    creationDate: Date;
    name: string;
    publicName: string;
    phoneNumber?: string;
    phoneAuthorization?: UserPhoneAuthorizationEnum;
    handle: string;
    username: string;
    passwordRecoveryEmailAddress: string;
    userType: UserTypeEnum;
    avatarFileId?: string | null;
    readOnlyData?: UserReadOnlyData;
    color?: ColorsEnum;
    gender?: GenderEnum;
    voiceLang?: VoiceLanguageEnum;
    deleted?: boolean;
}

export interface TickMention {
    targetType?: MentionTargetEnum;
    targetObjectId?: string;
    targetObjectVersionId?: string | null;
    receiverType?: MentionToEnum;
    receiverId?: string;
    initiator?: Initiator;
}

export interface TickMessage {
    groupId?: string | null;
    id: string;
    creationDate: Date;
    internalUserId?: string | null;
    status: MessageStatus;
    externalCommunicatorId?: string | null;
    externalCommunicatorAddressId?: string | null;
    communicationChannelId?: string;
    communicationChannelAddressId?: string | null;
    subject?: string;
    bodyAsMarkdown?: string;
    bodyAsHtml?: string | null;
    direction: CommunicationDirection;
    receiverType: CommunicationReceiverType;
    communicationType: CommunicationType;
    isEdited: boolean;
    attachmentLinks: FileLink[];
    replyOptions?: ReplyOptionsData[] | null;
    metaDataJson?: string | null;
}

export interface TickMetaDataComponent {
    id: string;
    name: string;
    weight: number;
    useBottomSlot: boolean;
    active: boolean;
    startConditionsJson?: string | null;
    skipConditionsJson?: string | null;
    startOnLabels?: string[] | null;
    skipOnLabels?: string[] | null;
    settingsJson?: string;
    sourceType?: ComponentDataSourceTypeEnum;
}

export interface TickNotification {
    id: string;
    creationDate: Date;
    receiverUserId: string;
    type?: NotificationTypeEnum;
    title?: string;
    message?: string;
    dataJSon?: string;
    resolvedDate?: Date | null;
}

export interface TickPartnerShipData {
    allowInvoicingViaPartner?: boolean;
    allowStartAsPartner?: boolean;
    reasonsNotAllowStartAsPartner?: string[] | null;
    currentPartnershipData?: TickTenantPartnership;
}

export interface TickPhoneCallParticipant {
    type?: ParticipantsTypeEnum;
    participantObjectId?: string;
    isCallInitiator?: boolean;
    jsonData?: string;
}

export interface TickPhoneCallParticipation {
    participantObjectId?: string;
    type?: ParticipantsTypeEnum;
    startDate?: Date;
    endDate?: Date | null;
}

export interface TickPhoneCallSummary {
    id?: string;
    creationDate?: Date;
    endDate?: Date | null;
    status?: PhoneChannelCallStatus;
    recordingFileLink?: FileLink;
    ticketId?: string | null;
    participations?: TickPhoneCallParticipation[];
}

export interface TickRemoveTenantRequest {
    confirmRemovingTenant?: boolean;
}

export interface TickShopifyWorkspaceIntegrationViewData {
    shopifyDomain?: string | null;
}

export interface TickSlaDefinitionData {
    id: string;
    name: string;
    active: boolean;
    slaType: SlaType;
    slaSettingsJson: string;
    startDate: Date;
    endDate: Date;
    startConditionsJson?: string | null;
    skipConditionsJson?: string | null;
    startOnLabels?: string[] | null;
    skipOnLabels?: string[] | null;
    showInTick?: boolean;
    startOnCommunicationChannelIds?: string[] | null;
    notificationSettings?: NotificationSettingsData;
}

export interface TickSlaDefinitionSummary {
    id: string;
    name: string;
    active: boolean;
    slaType: SlaType;
}

export interface TickStartAffiliatePartnershipRequest {
    financeViaPartnerShip: boolean;
    invoiceMailAddresses: string[];
}

export interface TickStartAffiliatePartnershipResponse {
    success?: boolean;
    message?: string;
    partnerShipId?: string | null;
}

export enum TickStatDataTypeEnum {
    DurationInMs = 0,
    Number = 1,
}

export interface TickStatDefinition {
    id?: string;
    subjectId?: string | null;
    name?: string | null;
    color?: ColorsEnum;
    subjectType?: TickStatSubjectType;
    hasStatsPerSubject?: boolean;
    dataType?: TickStatDataTypeEnum;
}

export enum TickStatSubjectType {
    None = 1,
    SlaDefinition = 2,
    DataAdapterDefinition = 3,
    CommunicationChannel = 4,
    User = 5,
    LabelDefinition = 6,
    TaskDefinition = 7,
    Team = 8,
}

export interface TickSubScriptionData {
    savedPlanId?: string;
    plans?: TickSubscriptionPlan[];
    hasAutoPaymentMandate?: boolean;
}

export interface TickSubscribeRequest {
    planId: string;
    billingName?: string | null;
    billingEmail?: string | null;
}

export interface TickSubscriptionCredit {
    id?: string;
    from?: Date;
    to?: Date;
    itemType?: SubscriptionCostItemType;
    startCreditValue?: number;
    remainingCreditValue?: number;
}

export interface TickSubscriptionPlan {
    id: string;
    selected: boolean;
    allowSubscribe: boolean;
    visible: boolean;
    planData?: TenantSubscriptionPlanData;
    hasCustomBaseCost?: boolean;
    alternativeActionHref?: string | null;
    billingPlan?: TenantSubscriptionBillingPlanData;
    currency: CurrencyType;
    name: string;
    descriptionMarkDown: string;
    baseCost: number;
    baseCostCalculationPeriod: BillingCalculationPeriod;
    billingPeriod: BillingPeriod;
    indexWeight: number;
}

export interface TickTaskDefinition {
    id: string;
    name: string;
    actionSummaries?: ActionSummary[] | null;
    active?: boolean;
    ticketRequired?: boolean;
    flowRequired?: boolean;
    settings?: TaskDefinitionSettings;
}

export interface TickTaskDefinitionSummary {
    id: string;
    name: string;
    actionSummaries?: ActionSummary[] | null;
    active?: boolean;
    ticketRequired?: boolean;
    flowRequired?: boolean;
}

export interface TickTaskInstanceSummary {
    id: string;
    name: string;
    assignedUserIds: string[];
    assignedTeamIds: string[];
    status?: TaskInstanceStatus;
    title?: string;
    note?: string;
    isAsync?: boolean;
    startDate?: Date;
    overdueDate?: Date | null;
    overdueDateTicks?: number | null;
    createdBy?: Initiator;
    finishedBy?: Initiator;
}

export interface TickTaskWorkingData {
    taskInstanceId?: string;
    taskDefinitionId?: string;
    ticketId?: string | null;
    chosenStatus?: TaskInstanceStatus;
    chosenActionId?: string | null;
    title?: string;
    note?: string;
    actionOptions?: TaskAction[];
    form?: FormData;
    summary?: TickTaskInstanceSummary;
}

export interface TickTenantPartnership {
    id?: string;
    name?: string;
    description?: string;
    active?: boolean;
    registerSubTenantUrl?: string | null;
    subTenants?: TenantOverviewSummary[] | null;
    financeViaPartnerShip: boolean;
    invoiceMailAddresses: string[];
}

export interface TickTicketCommunicator {
    id: string;
    name: string;
    markedAsSpammer: boolean;
    color: ColorsEnum;
    avatarFileId?: string | null;
    addresses: CommunicatorAddress[];
    isInvolved: boolean;
    primary: boolean;
}

export interface TickTicketLabel {
    ticketId: string;
    labelDefinitionId: string;
    start?: Date;
    end?: Date | null;
    createdBy?: Initiator;
    removedBy?: Initiator;
}

export interface TickUserAvatarStyleGroup {
    name?: string;
    styles?: UserAvatarStyle[];
}

export interface TickVerifiedInternetDomainSummary {
    id: string;
    name: string;
    domainName: string;
}

export interface TickWorkspace {
    id: string;
    isDefault: boolean;
    name: string;
    color: ColorsEnum;
    urlName: string;
    maxAllowedFileSize: number;
    memberOfTeamIds?: string[] | null;
    authorizations: WorkspaceAuthorization[];
    defaultDashboardId?: string | null;
    iconFileId?: string | null;
}

export interface TickWorkspaceFile {
    id: string;
    name: string;
    fileDataId: string;
    fileLink: FileLink;
}

export interface TickWorkspaceIntegration {
    id: string;
    name: string;
    type?: IntegrationType;
    active?: boolean;
    viewDataJson?: string;
}

export interface TickWorkspaceIntegrationProgress {
    redirectUrl?: string;
    active?: boolean;
}

export interface TickWorkspaceLog {
    id?: string;
    title?: string;
    message?: string;
    logType?: LogTypeEnum;
    initiator?: Initiator;
    creationDate?: Date;
}

export interface TickWorkspaceUtilityData {
    users?: UserSummary[];
    teams?: TeamSummary[];
    labelDefinitions?: TickLabelDefinition[];
    flowDefinitions?: TickFlowDefinitionSummary[];
    adapterDefinitions?: MetaDataItem[];
    communicationChannels?: TickChannelSummary[];
    files?: WorkspaceFileSummary[];
    executionEnvironments?: ExecutionEnvironmentMetaDataItem[];
    taskDefinitions?: TickTaskDefinitionSummary[];
    slaDefinitions?: TickSlaDefinitionSummary[];
    cannedResponseDefinitions?: MetaDataItem[];
    dashboardDefinitions?: TickDashboard[];
    knowledgeBases?: TickKnowledgeBaseSummary[];
    verifiedDomains?: TickVerifiedInternetDomainSummary[];
    databagItemDefinitions?: DatabagItemDefinitionSummary[];
    communicatorCategoryDefinitions?: TickCommunicatorCategoryDefinitionSummary[];
}

export interface TicketAssignmentActionData {
    resetFirst: boolean;
    assignRandomUser: boolean;
    assignRandomUserPreferOnline: boolean;
    assignRandomUserTeamId?: string | null;
    assignUserIds?: string[] | null;
    unAssignUserIds?: string[] | null;
    assignTeamIds?: string[] | null;
    unAssignTeamIds?: string[] | null;
}

export interface TicketDetails {
    id: string;
    workspaceId: string;
    title: string;
    staticName: string;
    primaryCommunicatorName: string;
    primaryCommunicatorId?: string;
    primaryCommunicatorAddressId?: string;
    primaryCommunicationChannelId?: string;
    status: TicketStatus;
    creationDate?: Date;
    editDateTicks?: number;
    labelDefinitionIds: string[];
    assignedUserIds: string[];
    assignedTeamIds: string[];
    communicatorAddressAvatarFileId?: string | null;
    slaTimers?: SlaTimer[];
    isTyping?: IsTypingData;
    slaDefinitionIds?: string[];
    timeline: TicketTimelineData;
    communicators: TickTicketCommunicator[];
    metaDataComponents: MetaDataComponentUpdate[];
    currentFlowInstanceDefinitionId: string;
}

export interface TicketEventButton {
    url?: string | null;
    text?: string | null;
}

export enum TicketEventType {
    Basic = 0,
}

export interface TicketFilterOptions {
    filterCommunicationChannelIds?: string[] | null;
    filterCreationFromDate?: Date | null;
    assignedTo?: AssignmentFilterEnum;
    customAssignedToUserIds?: string[] | null;
    customAssignedToTeamIds?: string[] | null;
    labelDefinitionIds?: string[] | null;
    status?: TicketFilterTicketStatusEnum;
}

export enum TicketFilterTicketStatusEnum {
    All = 0,
    Open = 1,
    Completed = 2,
}

export enum TicketLogicActionTypeEnum {
    Ticket = 1,
    TicketLabels = 2,
    TicketTitle = 5,
    TicketAssignments = 6,
}

export interface TicketLogicLabelsActionData {
    labelActions: UpdateLabelsActionDataItem[];
}

export interface TicketLogicSettingsData {
    finishTicket?: boolean | null;
}

export interface TicketLogicTitleActionData {
    title?: string | null;
}

export enum TicketStatus {
    Finished = 1,
    WaitingForCommunicator = 10,
    WaitingForTickUser = 20,
}

export interface TicketSummaries {
    items?: TicketSummary[];
}

export interface TicketSummary {
    id: string;
    workspaceId: string;
    title: string;
    staticName: string;
    primaryCommunicatorName: string;
    primaryCommunicatorId?: string;
    primaryCommunicatorAddressId?: string;
    primaryCommunicationChannelId?: string;
    status: TicketStatus;
    creationDate?: Date;
    editDateTicks?: number;
    labelDefinitionIds: string[];
    assignedUserIds: string[];
    assignedTeamIds: string[];
    communicatorAddressAvatarFileId?: string | null;
    slaTimers?: SlaTimer[];
    isTyping?: IsTypingData;
    slaDefinitionIds?: string[];
}

export interface TicketTimelineData {
    items?: TimelineDataItem[];
}

export interface TicketUpdate {
    timelineItems?: TimelineDataItem[] | null;
    hasFlowUpdate?: boolean | null;
    currentFlowInstanceDefinitionId?: string | null;
}

export interface TimeChartValueDataItem {
    value?: number | null;
    dateUtc?: string;
}

export interface TimeLineChartData {
    chartingType?: ChartingTypeEnum;
    chartingSize?: ChartingSizeEnum;
    readonly min?: number | null;
    readonly max?: number | null;
    dataType?: TickStatDataTypeEnum;
    chartData?: TimeChartValueDataItem[];
    title?: string;
    color?: ColorsEnum;
    updateToUtc?: Date | null;
}

export interface TimelineAssigment {
    holderId?: string;
    holderType?: AssigneeTypeEnum;
    initiator?: Initiator;
    actionType?: AssignmentActionType;
    assignmentObjectType?: AssignmentObjectTypeEnum;
    assignmentObjectId?: string;
    message?: string;
}

export interface TimelineDataItem {
    timelineDate: Date;
    timelineDateAsTick: number;
    id: string;
    important: boolean;
    type: TimelineDataItemType;
    data: any;
}

export enum TimelineDataItemType {
    Group = 0,
    Message = 1,
    SlaFailure = 2,
    Assignment = 3,
    TaskInstance = 4,
    Note = 5,
    Label = 6,
    Flow = 7,
    TicketEvent = 8,
    SystemMessage = 9,
    PhoneCall = 10,
}

export interface TimelineFlowInstance {
    flowInstanceId?: string;
    flowDefinitionId?: string;
    isEnd?: boolean;
    initiator?: Initiator;
}

export interface TimelineLabel {
    isEnd?: boolean;
    label?: TickTicketLabel;
}

export interface TimelineNote {
    id?: string;
    sentDate?: Date;
    bodyAsMarkdown: string;
    bodyAsHtml?: string;
    initiator?: Initiator;
    attachmentLinks?: FileLink[];
}

export interface TimelinePhoneCallLog {
    id?: string;
    durationMs?: number | null;
    recordingFile?: FileLink;
    communicationChannelId?: string;
}

export interface TimelineSystemMessage {
    message?: string;
    type?: TimelineSystemMessageType;
    initiator?: Initiator;
}

export enum TimelineSystemMessageType {
    TicketFinish = 0,
}

export interface TimelineTaskInstance {
    id?: string;
    summary?: TickTaskInstanceSummary;
}

export interface TimelineTicketEvent {
    id?: string;
    eventType?: TicketEventType;
    dataJson?: string;
}

export interface TransferCallRequest {
    workspaceId: string;
    callId: string;
    toType: ParticipantsTypeEnum;
    toId: string;
    fromDeviceId: string;
}

export interface TypingCommunicatorData {
    communicatorId: string;
}

export interface TypingUserData {
    userId: string;
    name?: string;
}

export interface UIPositionData {
    x: number;
    y: number;
}

export interface UpdateActionRequest {
    flowVersionId: string;
    stepId: string;
    actionId: string;
    index?: number | null;
    name?: string | null;
    note?: string | null;
    settingsJson?: string | null;
}

export interface UpdateAdminRequest {
    userId?: string;
    admin?: boolean;
}

export interface UpdateCollectionRequest {
    collectionId: string;
    name: string;
}

export interface UpdateFlowStepActionResponse {
    flowVersionId: string;
    stepId: string;
    action: FlowDefinitionAction;
}

export interface UpdateFlowStepPositionRequest {
    flowVersionId: string;
    stepId: string;
    position: UIPositionData;
}

export interface UpdateFlowStepRequest {
    flowVersionId: string;
    stepId: string;
    name?: string | null;
    color?: ColorsEnum;
    position?: UIPositionData;
}

export interface UpdateFlowStepResponse {
    flowVersionId: string;
    step: FlowStep;
}

export interface UpdateFlowStepTargetRequest {
    flowVersionId: string;
    stepId: string;
    targetStepId?: string | null;
}

export interface UpdateLabelsActionDataItem {
    labelDefinitionId: string;
    action: LabelActionType;
}

export interface UpdateLabelsRequest {
    workspaceId: string;
    labels: TickLabelDefinition[];
}

export interface UpdateMyUserRequest {
    workspaceId: string;
    avatarFileId?: string | null;
    color?: ColorsEnum;
    name?: string | null;
    settingsJson?: string | null;
    localeCode?: string | null;
}

export interface UpdateWorkspaceRequest {
    workspaceId: string;
    name: string;
    iconFileId?: string | null;
}

export interface UpdateWorkspaceResponse {
    workspaceId: string;
    name: string;
    iconFileId?: string | null;
    urlName: string;
}

export enum UsageArea {
    Everywhere = 0,
    App = 1,
    Server = 2,
}

export interface UserAvatarStyle {
    isCustom?: boolean;
    fileId?: string | null;
}

export interface UserEvent {
    userId?: string;
    eventType?: UserEventType;
}

export enum UserEventType {
    ForceLogOutDevices = 0,
}

export enum UserPhoneAuthorizationEnum {
    NeverCall = 0,
    OnlyOnVoiceDevice = 1,
    PhoneWhenNoVoiceDevice = 2,
    PhoneWhenLoggedOut = 3,
}

export interface UserReadOnlyData {
    isAdmin?: boolean;
}

export interface UserServiceAuthenticationResponse {
    authenticationSuccess: boolean;
    authenticationMessage: string;
    userId: string;
    token: string;
    tenantId?: string | null;
    admin?: boolean;
    isFirstLogin?: boolean;
    viewstateSettingsJson?: string | null;
    readonly localeLode?: string | null;
}

export interface UserSummary {
    id: string;
    name: string;
    handle: string;
    voiceAvailable?: boolean;
    userType: UserTypeEnum;
    phoneAuthorization?: UserPhoneAuthorizationEnum;
    loggedIn: boolean;
    avatarFileId?: string | null;
    deleted?: boolean;
    isAdmin?: boolean;
    emailAddress?: string | null;
    color?: ColorsEnum;
}

export enum UserTypeEnum {
    User = 0,
    Bot = 1,
}

export interface ValidateEmailSettingsResponse {
    channelId: string;
    success: boolean;
    message: string;
}

export interface ValidateInternetDomainRequest {
    internetDomainId?: string;
    validationKey?: string;
}

export interface ValidatePhoneNumberRequest {
    type: ValidationCodeTypeEnum;
    phoneNumber: string;
    objectId: string;
    code?: string | null;
}

export interface ValidatePhoneNumberResponse {
    message?: string;
    success?: boolean;
}

export interface ValidateTelegramTokenResponse {
    channelId: string;
    success: boolean;
    message: string;
    username?: string | null;
    deeplink?: string | null;
}

export interface ValidateTwilioPhoneTokenResponse {
    channelId: string;
    success: boolean;
    message: string;
    availablePhoneNumbers?: PhoneNumberData[] | null;
}

export enum ValidationCodeTypeEnum {
    ResetUserPassword = 0,
    ValidateUserPhoneNumber = 1,
    ValidateTeamPhoneNumber = 2,
}

export interface ValidationData {
    maxDurationMonths?: number | null;
    maxMonthsWithoutUserSeatUsage?: number | null;
}

export enum ValidationTypeEnum {
    Custom = 0,
    Text = 1,
    Number = 2,
    Emailaddress = 3,
}

export interface Version {
    readonly major?: number;
    readonly minor?: number;
    readonly build?: number;
    readonly revision?: number;
    readonly majorRevision?: number;
    readonly minorRevision?: number;
}

export enum VoiceLanguageEnum {
    English = 0,
    Dutch = 1,
}

export interface WorkingFormTileSettings {
    id?: string;
    width?: number | null;
    height?: number | null;
    x?: number | null;
    y?: number | null;
    fields?: FormField[] | null;
}

export interface WorkspaceAuthorization {
    id: string;
    workspaceId: string;
    creationDate: Date;
    subjectId?: string;
    objectType?: AuthorizationObjectType;
    objectId?: string | null;
    subjectType?: AuthorizationSubjectType;
    as?: AuthorizationType;
}

export interface WorkspaceFileSummary {
    id: string;
    name: string;
    link?: FileLink;
}

export interface WorkspaceRequest {
    workspaceId: string;
}